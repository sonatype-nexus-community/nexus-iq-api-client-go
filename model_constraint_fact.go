/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.184.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the ConstraintFact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConstraintFact{}

// ConstraintFact struct for ConstraintFact
type ConstraintFact struct {
	ConditionFacts []ConditionFact `json:"conditionFacts,omitempty"`
	ConstraintId *string `json:"constraintId,omitempty"`
	ConstraintName *string `json:"constraintName,omitempty"`
	OperatorName *string `json:"operatorName,omitempty"`
}

// NewConstraintFact instantiates a new ConstraintFact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstraintFact() *ConstraintFact {
	this := ConstraintFact{}
	return &this
}

// NewConstraintFactWithDefaults instantiates a new ConstraintFact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstraintFactWithDefaults() *ConstraintFact {
	this := ConstraintFact{}
	return &this
}

// GetConditionFacts returns the ConditionFacts field value if set, zero value otherwise.
func (o *ConstraintFact) GetConditionFacts() []ConditionFact {
	if o == nil || IsNil(o.ConditionFacts) {
		var ret []ConditionFact
		return ret
	}
	return o.ConditionFacts
}

// GetConditionFactsOk returns a tuple with the ConditionFacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstraintFact) GetConditionFactsOk() ([]ConditionFact, bool) {
	if o == nil || IsNil(o.ConditionFacts) {
		return nil, false
	}
	return o.ConditionFacts, true
}

// HasConditionFacts returns a boolean if a field has been set.
func (o *ConstraintFact) HasConditionFacts() bool {
	if o != nil && !IsNil(o.ConditionFacts) {
		return true
	}

	return false
}

// SetConditionFacts gets a reference to the given []ConditionFact and assigns it to the ConditionFacts field.
func (o *ConstraintFact) SetConditionFacts(v []ConditionFact) {
	o.ConditionFacts = v
}

// GetConstraintId returns the ConstraintId field value if set, zero value otherwise.
func (o *ConstraintFact) GetConstraintId() string {
	if o == nil || IsNil(o.ConstraintId) {
		var ret string
		return ret
	}
	return *o.ConstraintId
}

// GetConstraintIdOk returns a tuple with the ConstraintId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstraintFact) GetConstraintIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConstraintId) {
		return nil, false
	}
	return o.ConstraintId, true
}

// HasConstraintId returns a boolean if a field has been set.
func (o *ConstraintFact) HasConstraintId() bool {
	if o != nil && !IsNil(o.ConstraintId) {
		return true
	}

	return false
}

// SetConstraintId gets a reference to the given string and assigns it to the ConstraintId field.
func (o *ConstraintFact) SetConstraintId(v string) {
	o.ConstraintId = &v
}

// GetConstraintName returns the ConstraintName field value if set, zero value otherwise.
func (o *ConstraintFact) GetConstraintName() string {
	if o == nil || IsNil(o.ConstraintName) {
		var ret string
		return ret
	}
	return *o.ConstraintName
}

// GetConstraintNameOk returns a tuple with the ConstraintName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstraintFact) GetConstraintNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConstraintName) {
		return nil, false
	}
	return o.ConstraintName, true
}

// HasConstraintName returns a boolean if a field has been set.
func (o *ConstraintFact) HasConstraintName() bool {
	if o != nil && !IsNil(o.ConstraintName) {
		return true
	}

	return false
}

// SetConstraintName gets a reference to the given string and assigns it to the ConstraintName field.
func (o *ConstraintFact) SetConstraintName(v string) {
	o.ConstraintName = &v
}

// GetOperatorName returns the OperatorName field value if set, zero value otherwise.
func (o *ConstraintFact) GetOperatorName() string {
	if o == nil || IsNil(o.OperatorName) {
		var ret string
		return ret
	}
	return *o.OperatorName
}

// GetOperatorNameOk returns a tuple with the OperatorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstraintFact) GetOperatorNameOk() (*string, bool) {
	if o == nil || IsNil(o.OperatorName) {
		return nil, false
	}
	return o.OperatorName, true
}

// HasOperatorName returns a boolean if a field has been set.
func (o *ConstraintFact) HasOperatorName() bool {
	if o != nil && !IsNil(o.OperatorName) {
		return true
	}

	return false
}

// SetOperatorName gets a reference to the given string and assigns it to the OperatorName field.
func (o *ConstraintFact) SetOperatorName(v string) {
	o.OperatorName = &v
}

func (o ConstraintFact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConstraintFact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConditionFacts) {
		toSerialize["conditionFacts"] = o.ConditionFacts
	}
	if !IsNil(o.ConstraintId) {
		toSerialize["constraintId"] = o.ConstraintId
	}
	if !IsNil(o.ConstraintName) {
		toSerialize["constraintName"] = o.ConstraintName
	}
	if !IsNil(o.OperatorName) {
		toSerialize["operatorName"] = o.OperatorName
	}
	return toSerialize, nil
}

type NullableConstraintFact struct {
	value *ConstraintFact
	isSet bool
}

func (v NullableConstraintFact) Get() *ConstraintFact {
	return v.value
}

func (v *NullableConstraintFact) Set(val *ConstraintFact) {
	v.value = val
	v.isSet = true
}

func (v NullableConstraintFact) IsSet() bool {
	return v.isSet
}

func (v *NullableConstraintFact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstraintFact(val *ConstraintFact) *NullableConstraintFact {
	return &NullableConstraintFact{value: val, isSet: true}
}

func (v NullableConstraintFact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstraintFact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


