/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.184.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DeveloperPrioritiesAPIService DeveloperPrioritiesAPI service
type DeveloperPrioritiesAPIService service

type ApiGetPrioritiesRequest struct {
	ctx context.Context
	ApiService *DeveloperPrioritiesAPIService
	applicationId string
	scanId string
	includeRemediation *bool
	page *int32
	pageSize *int32
	optionalComponentNameFilter *string
}

func (r ApiGetPrioritiesRequest) IncludeRemediation(includeRemediation bool) ApiGetPrioritiesRequest {
	r.includeRemediation = &includeRemediation
	return r
}

func (r ApiGetPrioritiesRequest) Page(page int32) ApiGetPrioritiesRequest {
	r.page = &page
	return r
}

func (r ApiGetPrioritiesRequest) PageSize(pageSize int32) ApiGetPrioritiesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetPrioritiesRequest) OptionalComponentNameFilter(optionalComponentNameFilter string) ApiGetPrioritiesRequest {
	r.optionalComponentNameFilter = &optionalComponentNameFilter
	return r
}

func (r ApiGetPrioritiesRequest) Execute() (*DevelopmentPrioritizationResults, *http.Response, error) {
	return r.ApiService.GetPrioritiesExecute(r)
}

/*
GetPriorities Method for GetPriorities

Use this method to retrieve the priorities for the specified application Id and scan Id

Permissions required: View IQ Elements 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId
 @param scanId
 @return ApiGetPrioritiesRequest
*/
func (a *DeveloperPrioritiesAPIService) GetPriorities(ctx context.Context, applicationId string, scanId string) ApiGetPrioritiesRequest {
	return ApiGetPrioritiesRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		scanId: scanId,
	}
}

// Execute executes the request
//  @return DevelopmentPrioritizationResults
func (a *DeveloperPrioritiesAPIService) GetPrioritiesExecute(r ApiGetPrioritiesRequest) (*DevelopmentPrioritizationResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DevelopmentPrioritizationResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeveloperPrioritiesAPIService.GetPriorities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/developer/priorities/{applicationId}/{scanId}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scanId"+"}", url.PathEscape(parameterValueToString(r.scanId, "scanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeRemediation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeRemediation", r.includeRemediation, "form", "")
	} else {
		var defaultValue bool = false
		r.includeRemediation = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 10
		r.pageSize = &defaultValue
	}
	if r.optionalComponentNameFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "optionalComponentNameFilter", r.optionalComponentNameFilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPrioritiesExportRequest struct {
	ctx context.Context
	ApiService *DeveloperPrioritiesAPIService
	applicationId string
	scanId string
}

func (r ApiGetPrioritiesExportRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetPrioritiesExportExecute(r)
}

/*
GetPrioritiesExport Method for GetPrioritiesExport

Use this method to retrieve the priorities for the specified application Id and scan Id

Permissions required: View IQ Elements 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId
 @param scanId
 @return ApiGetPrioritiesExportRequest
*/
func (a *DeveloperPrioritiesAPIService) GetPrioritiesExport(ctx context.Context, applicationId string, scanId string) ApiGetPrioritiesExportRequest {
	return ApiGetPrioritiesExportRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		scanId: scanId,
	}
}

// Execute executes the request
func (a *DeveloperPrioritiesAPIService) GetPrioritiesExportExecute(r ApiGetPrioritiesExportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeveloperPrioritiesAPIService.GetPrioritiesExport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/developer/priorities/{applicationId}/{scanId}/export"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scanId"+"}", url.PathEscape(parameterValueToString(r.scanId, "scanId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
