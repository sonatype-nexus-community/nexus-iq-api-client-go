/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.192.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the PolicyAlert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyAlert{}

// PolicyAlert struct for PolicyAlert
type PolicyAlert struct {
	Actions []Action `json:"actions,omitempty"`
	Trigger *PolicyFact `json:"trigger,omitempty"`
}

// NewPolicyAlert instantiates a new PolicyAlert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyAlert() *PolicyAlert {
	this := PolicyAlert{}
	return &this
}

// NewPolicyAlertWithDefaults instantiates a new PolicyAlert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyAlertWithDefaults() *PolicyAlert {
	this := PolicyAlert{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *PolicyAlert) GetActions() []Action {
	if o == nil || IsNil(o.Actions) {
		var ret []Action
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyAlert) GetActionsOk() ([]Action, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *PolicyAlert) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []Action and assigns it to the Actions field.
func (o *PolicyAlert) SetActions(v []Action) {
	o.Actions = v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *PolicyAlert) GetTrigger() PolicyFact {
	if o == nil || IsNil(o.Trigger) {
		var ret PolicyFact
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyAlert) GetTriggerOk() (*PolicyFact, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *PolicyAlert) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given PolicyFact and assigns it to the Trigger field.
func (o *PolicyAlert) SetTrigger(v PolicyFact) {
	o.Trigger = &v
}

func (o PolicyAlert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyAlert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	return toSerialize, nil
}

type NullablePolicyAlert struct {
	value *PolicyAlert
	isSet bool
}

func (v NullablePolicyAlert) Get() *PolicyAlert {
	return v.value
}

func (v *NullablePolicyAlert) Set(val *PolicyAlert) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyAlert) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyAlert(val *PolicyAlert) *NullablePolicyAlert {
	return &NullablePolicyAlert{value: val, isSet: true}
}

func (v NullablePolicyAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


