/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.192.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AutoPolicyWaiversAPIService AutoPolicyWaiversAPI service
type AutoPolicyWaiversAPIService service

type ApiAddAutoPolicyWaiverRequest struct {
	ctx context.Context
	ApiService *AutoPolicyWaiversAPIService
	ownerType string
	ownerId string
	apiAutoPolicyWaiverDTO *ApiAutoPolicyWaiverDTO
}

// The request JSON can include the fields&lt;ol&gt;&lt;li&gt;threatLevel&lt;/li&gt;&lt;li&gt;pathForward&lt;/li&gt;&lt;li&gt;reachable&lt;/li&gt;&lt;/ol&gt;
func (r ApiAddAutoPolicyWaiverRequest) ApiAutoPolicyWaiverDTO(apiAutoPolicyWaiverDTO ApiAutoPolicyWaiverDTO) ApiAddAutoPolicyWaiverRequest {
	r.apiAutoPolicyWaiverDTO = &apiAutoPolicyWaiverDTO
	return r
}

func (r ApiAddAutoPolicyWaiverRequest) Execute() (*ApiAutoPolicyWaiverDTO, *http.Response, error) {
	return r.ApiService.AddAutoPolicyWaiverExecute(r)
}

/*
AddAutoPolicyWaiver Method for AddAutoPolicyWaiver

Use this method to create an auto policy waiver configuration. Only one configuration can exist at a time for a given application or organization.

Permissions required: Waive Policy Violations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the ownerType to specify the scope. The response will contain the details for waivers within the scope.
 @param ownerId Enter the corresponding id for the ownerType specified above.
 @return ApiAddAutoPolicyWaiverRequest
*/
func (a *AutoPolicyWaiversAPIService) AddAutoPolicyWaiver(ctx context.Context, ownerType string, ownerId string) ApiAddAutoPolicyWaiverRequest {
	return ApiAddAutoPolicyWaiverRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
	}
}

// Execute executes the request
//  @return ApiAutoPolicyWaiverDTO
func (a *AutoPolicyWaiversAPIService) AddAutoPolicyWaiverExecute(r ApiAddAutoPolicyWaiverRequest) (*ApiAutoPolicyWaiverDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiAutoPolicyWaiverDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoPolicyWaiversAPIService.AddAutoPolicyWaiver")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/autoPolicyWaivers/{ownerType}/{ownerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiAutoPolicyWaiverDTO == nil {
		return localVarReturnValue, nil, reportError("apiAutoPolicyWaiverDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiAutoPolicyWaiverDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAddAutoPolicyWaiversRequest struct {
	ctx context.Context
	ApiService *AutoPolicyWaiversAPIService
	ownerType string
	ownerId string
	apiAutoPolicyWaiverDTO *[]ApiAutoPolicyWaiverDTO
}

// The request JSON can be an array that include the fields&lt;ol&gt;&lt;li&gt;threatLevel&lt;/li&gt;&lt;li&gt;pathForward&lt;/li&gt;&lt;li&gt;reachable&lt;/li&gt;&lt;/ol&gt;
func (r ApiAddAutoPolicyWaiversRequest) ApiAutoPolicyWaiverDTO(apiAutoPolicyWaiverDTO []ApiAutoPolicyWaiverDTO) ApiAddAutoPolicyWaiversRequest {
	r.apiAutoPolicyWaiverDTO = &apiAutoPolicyWaiverDTO
	return r
}

func (r ApiAddAutoPolicyWaiversRequest) Execute() ([]ApiAutoPolicyWaiverDTO, *http.Response, error) {
	return r.ApiService.AddAutoPolicyWaiversExecute(r)
}

/*
AddAutoPolicyWaivers Method for AddAutoPolicyWaivers

Use this method to create an auto policy waiver configuration. Only three configurations can  exist at a time for a given application or organization. With different combinations for reachable/pathForward

Permissions required: Waive Policy Violations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the ownerType to specify the scope. The response will contain the details for waivers within the scope.
 @param ownerId Enter the corresponding id for the ownerType specified above.
 @return ApiAddAutoPolicyWaiversRequest
*/
func (a *AutoPolicyWaiversAPIService) AddAutoPolicyWaivers(ctx context.Context, ownerType string, ownerId string) ApiAddAutoPolicyWaiversRequest {
	return ApiAddAutoPolicyWaiversRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
	}
}

// Execute executes the request
//  @return []ApiAutoPolicyWaiverDTO
func (a *AutoPolicyWaiversAPIService) AddAutoPolicyWaiversExecute(r ApiAddAutoPolicyWaiversRequest) ([]ApiAutoPolicyWaiverDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ApiAutoPolicyWaiverDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoPolicyWaiversAPIService.AddAutoPolicyWaivers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/autoPolicyWaivers/v2/{ownerType}/{ownerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiAutoPolicyWaiverDTO == nil {
		return localVarReturnValue, nil, reportError("apiAutoPolicyWaiverDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiAutoPolicyWaiverDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAutoPolicyWaiverRequest struct {
	ctx context.Context
	ApiService *AutoPolicyWaiversAPIService
	ownerType string
	ownerId string
	autoPolicyWaiverId string
}

func (r ApiDeleteAutoPolicyWaiverRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAutoPolicyWaiverExecute(r)
}

/*
DeleteAutoPolicyWaiver Method for DeleteAutoPolicyWaiver

Use this method to delete an auto policy waiver, specified by the autoPolicyWaiverId.

Permissions required: Waive Policy Violations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the ownerType to specify the scope. A waiver corresponding to the autoPolicyWaiverId provided and within the scope specified will be deleted.
 @param ownerId Enter the corresponding id for the ownerType specified above.
 @param autoPolicyWaiverId Enter the autoPolicyWaiverId to be deleted
 @return ApiDeleteAutoPolicyWaiverRequest
*/
func (a *AutoPolicyWaiversAPIService) DeleteAutoPolicyWaiver(ctx context.Context, ownerType string, ownerId string, autoPolicyWaiverId string) ApiDeleteAutoPolicyWaiverRequest {
	return ApiDeleteAutoPolicyWaiverRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
		autoPolicyWaiverId: autoPolicyWaiverId,
	}
}

// Execute executes the request
func (a *AutoPolicyWaiversAPIService) DeleteAutoPolicyWaiverExecute(r ApiDeleteAutoPolicyWaiverRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoPolicyWaiversAPIService.DeleteAutoPolicyWaiver")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/autoPolicyWaivers/{ownerType}/{ownerId}/{autoPolicyWaiverId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"autoPolicyWaiverId"+"}", url.PathEscape(parameterValueToString(r.autoPolicyWaiverId, "autoPolicyWaiverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetApplicableAutoWaiversRequest struct {
	ctx context.Context
	ApiService *AutoPolicyWaiversAPIService
	ownerType string
	ownerId string
}

func (r ApiGetApplicableAutoWaiversRequest) Execute() ([]ApiAutoPolicyWaiverStatusDTO, *http.Response, error) {
	return r.ApiService.GetApplicableAutoWaiversExecute(r)
}

/*
GetApplicableAutoWaivers Method for GetApplicableAutoWaivers

Use this method to retrieve all applicable auto waivers for the scope specified. You can specify the scope by using the parameters ownerType and ownerId.

Permissions required: View IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the ownerType to specify the scope. The response will contain applicable auto policy waivers, if any, that are within the scope specified.
 @param ownerId Enter the corresponding id for the ownerType.
 @return ApiGetApplicableAutoWaiversRequest
*/
func (a *AutoPolicyWaiversAPIService) GetApplicableAutoWaivers(ctx context.Context, ownerType string, ownerId string) ApiGetApplicableAutoWaiversRequest {
	return ApiGetApplicableAutoWaiversRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
	}
}

// Execute executes the request
//  @return []ApiAutoPolicyWaiverStatusDTO
func (a *AutoPolicyWaiversAPIService) GetApplicableAutoWaiversExecute(r ApiGetApplicableAutoWaiversRequest) ([]ApiAutoPolicyWaiverStatusDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ApiAutoPolicyWaiverStatusDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoPolicyWaiversAPIService.GetApplicableAutoWaivers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/autoPolicyWaivers/v2/{ownerType}/{ownerId}/applicableAutoWaivers"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAutoPolicyWaiverRequest struct {
	ctx context.Context
	ApiService *AutoPolicyWaiversAPIService
	ownerType string
	ownerId string
	autoPolicyWaiverId string
}

func (r ApiGetAutoPolicyWaiverRequest) Execute() (*ApiAutoPolicyWaiverDTO, *http.Response, error) {
	return r.ApiService.GetAutoPolicyWaiverExecute(r)
}

/*
GetAutoPolicyWaiver Method for GetAutoPolicyWaiver

Use this method to retrieve auto policy waiver details for the autoPolicyWaiverId specified.

Permissions required: View IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the ownerType to specify the scope. The response will contain the details for waivers within the scope.
 @param ownerId Enter the corresponding id for the ownerType specified above.
 @param autoPolicyWaiverId Enter the autoPolicyWaiverId for which you want to retrieve the auto policy waiver details.
 @return ApiGetAutoPolicyWaiverRequest
*/
func (a *AutoPolicyWaiversAPIService) GetAutoPolicyWaiver(ctx context.Context, ownerType string, ownerId string, autoPolicyWaiverId string) ApiGetAutoPolicyWaiverRequest {
	return ApiGetAutoPolicyWaiverRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
		autoPolicyWaiverId: autoPolicyWaiverId,
	}
}

// Execute executes the request
//  @return ApiAutoPolicyWaiverDTO
func (a *AutoPolicyWaiversAPIService) GetAutoPolicyWaiverExecute(r ApiGetAutoPolicyWaiverRequest) (*ApiAutoPolicyWaiverDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiAutoPolicyWaiverDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoPolicyWaiversAPIService.GetAutoPolicyWaiver")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/autoPolicyWaivers/{ownerType}/{ownerId}/{autoPolicyWaiverId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"autoPolicyWaiverId"+"}", url.PathEscape(parameterValueToString(r.autoPolicyWaiverId, "autoPolicyWaiverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAutoPolicyWaiverStatusRequest struct {
	ctx context.Context
	ApiService *AutoPolicyWaiversAPIService
	ownerType string
	ownerId string
}

func (r ApiGetAutoPolicyWaiverStatusRequest) Execute() (*ApiAutoPolicyWaiverStatusDTO, *http.Response, error) {
	return r.ApiService.GetAutoPolicyWaiverStatusExecute(r)
}

/*
GetAutoPolicyWaiverStatus Method for GetAutoPolicyWaiverStatus

Use this method to retrieve status details for any auto policy waiver enabled for the scope specified. You can specify the scope by using the parameters ownerType and ownerId.

Permissions required: View IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the ownerType to specify the scope. The response will contain status details for the active auto policy waiver, if any, that is within the scope specified.
 @param ownerId Enter the corresponding id for the ownerType specified above.
 @return ApiGetAutoPolicyWaiverStatusRequest
*/
func (a *AutoPolicyWaiversAPIService) GetAutoPolicyWaiverStatus(ctx context.Context, ownerType string, ownerId string) ApiGetAutoPolicyWaiverStatusRequest {
	return ApiGetAutoPolicyWaiverStatusRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
	}
}

// Execute executes the request
//  @return ApiAutoPolicyWaiverStatusDTO
func (a *AutoPolicyWaiversAPIService) GetAutoPolicyWaiverStatusExecute(r ApiGetAutoPolicyWaiverStatusRequest) (*ApiAutoPolicyWaiverStatusDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiAutoPolicyWaiverStatusDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoPolicyWaiversAPIService.GetAutoPolicyWaiverStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/autoPolicyWaivers/{ownerType}/{ownerId}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAutoPolicyWaiversRequest struct {
	ctx context.Context
	ApiService *AutoPolicyWaiversAPIService
	ownerType string
	ownerId string
}

func (r ApiGetAutoPolicyWaiversRequest) Execute() ([]ApiAutoPolicyWaiverDTO, *http.Response, error) {
	return r.ApiService.GetAutoPolicyWaiversExecute(r)
}

/*
GetAutoPolicyWaivers Method for GetAutoPolicyWaivers

Use this method to retrieve waiver details for all auto policy waivers for the scope specified. You can specify the scope by using the parameters ownerType and ownerId.

Permissions required: View IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the ownerType to specify the scope. The response will contain waivers that are within the scope specified.
 @param ownerId Enter the corresponding id for the ownerType specified above.
 @return ApiGetAutoPolicyWaiversRequest
*/
func (a *AutoPolicyWaiversAPIService) GetAutoPolicyWaivers(ctx context.Context, ownerType string, ownerId string) ApiGetAutoPolicyWaiversRequest {
	return ApiGetAutoPolicyWaiversRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
	}
}

// Execute executes the request
//  @return []ApiAutoPolicyWaiverDTO
func (a *AutoPolicyWaiversAPIService) GetAutoPolicyWaiversExecute(r ApiGetAutoPolicyWaiversRequest) ([]ApiAutoPolicyWaiverDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ApiAutoPolicyWaiverDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoPolicyWaiversAPIService.GetAutoPolicyWaivers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/autoPolicyWaivers/{ownerType}/{ownerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAutoPolicyWaiverRequest struct {
	ctx context.Context
	ApiService *AutoPolicyWaiversAPIService
	ownerType string
	ownerId string
	autoPolicyWaiverId string
	apiAutoPolicyWaiverDTO *ApiAutoPolicyWaiverDTO
}

// The request JSON can include the fields&lt;ol&gt;&lt;li&gt;autoPolicyWaiverId&lt;/li&gt;&lt;li&gt;threatLevel&lt;/li&gt;&lt;li&gt;pathForward&lt;/li&gt;&lt;li&gt;reachable&lt;/li&gt;&lt;/ol&gt;
func (r ApiUpdateAutoPolicyWaiverRequest) ApiAutoPolicyWaiverDTO(apiAutoPolicyWaiverDTO ApiAutoPolicyWaiverDTO) ApiUpdateAutoPolicyWaiverRequest {
	r.apiAutoPolicyWaiverDTO = &apiAutoPolicyWaiverDTO
	return r
}

func (r ApiUpdateAutoPolicyWaiverRequest) Execute() (*ApiAutoPolicyWaiverDTO, *http.Response, error) {
	return r.ApiService.UpdateAutoPolicyWaiverExecute(r)
}

/*
UpdateAutoPolicyWaiver Method for UpdateAutoPolicyWaiver

Use this method to update an auto policy waiver, specified by the autoPolicyWaiverId.

Permissions required: Write IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the ownerType to specify the scope. The response will contain the details for waivers within the scope.
 @param ownerId Enter the corresponding id for the ownerType specified above.
 @param autoPolicyWaiverId Enter the autoPolicyWaiverId to be updated.
 @return ApiUpdateAutoPolicyWaiverRequest
*/
func (a *AutoPolicyWaiversAPIService) UpdateAutoPolicyWaiver(ctx context.Context, ownerType string, ownerId string, autoPolicyWaiverId string) ApiUpdateAutoPolicyWaiverRequest {
	return ApiUpdateAutoPolicyWaiverRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
		autoPolicyWaiverId: autoPolicyWaiverId,
	}
}

// Execute executes the request
//  @return ApiAutoPolicyWaiverDTO
func (a *AutoPolicyWaiversAPIService) UpdateAutoPolicyWaiverExecute(r ApiUpdateAutoPolicyWaiverRequest) (*ApiAutoPolicyWaiverDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiAutoPolicyWaiverDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoPolicyWaiversAPIService.UpdateAutoPolicyWaiver")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/autoPolicyWaivers/{ownerType}/{ownerId}/{autoPolicyWaiverId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"autoPolicyWaiverId"+"}", url.PathEscape(parameterValueToString(r.autoPolicyWaiverId, "autoPolicyWaiverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiAutoPolicyWaiverDTO == nil {
		return localVarReturnValue, nil, reportError("apiAutoPolicyWaiverDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiAutoPolicyWaiverDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
