/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.182.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DataRetentionPoliciesAPIService DataRetentionPoliciesAPI service
type DataRetentionPoliciesAPIService service

type ApiGetDataRetentionPoliciesRequest struct {
	ctx context.Context
	ApiService *DataRetentionPoliciesAPIService
	organizationId string
}

func (r ApiGetDataRetentionPoliciesRequest) Execute() (*ApiDataRetentionPoliciesDTO, *http.Response, error) {
	return r.ApiService.GetDataRetentionPoliciesExecute(r)
}

/*
GetDataRetentionPolicies Method for GetDataRetentionPolicies

Data retention policies help to limit the disk space consumption by removing obsolete data. Use this method to inspect the retention policies that are in effect for an organization. Application reports created by continuous monitoring are not affected by the stage retention policy. They appear separately under the key continuous-monitoring in the response JSON<p>Permissions required: View IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organizationId assigned by IQ Server. Use the organization REST API to retrieve the organizationId.
 @return ApiGetDataRetentionPoliciesRequest
*/
func (a *DataRetentionPoliciesAPIService) GetDataRetentionPolicies(ctx context.Context, organizationId string) ApiGetDataRetentionPoliciesRequest {
	return ApiGetDataRetentionPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return ApiDataRetentionPoliciesDTO
func (a *DataRetentionPoliciesAPIService) GetDataRetentionPoliciesExecute(r ApiGetDataRetentionPoliciesRequest) (*ApiDataRetentionPoliciesDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiDataRetentionPoliciesDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataRetentionPoliciesAPIService.GetDataRetentionPolicies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/dataRetentionPolicies/organizations/{organizationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetParentDataRetentionPoliciesRequest struct {
	ctx context.Context
	ApiService *DataRetentionPoliciesAPIService
	organizationId string
}

func (r ApiGetParentDataRetentionPoliciesRequest) Execute() (*ApiDataRetentionPoliciesDTO, *http.Response, error) {
	return r.ApiService.GetParentDataRetentionPoliciesExecute(r)
}

/*
GetParentDataRetentionPolicies Method for GetParentDataRetentionPolicies

Data retention policies help to limit the disk space consumption by removing obsolete data. Use this method to inspect the retention policies that are in effect for the parent organization of the given organization. Application reports created by continuous monitoring are not affected by the stage retention policy. They appear separately under the key continuous-monitoring.<p>Permissions required: View IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organizationId assigned by IQ Server. Use the organization REST API to retrieve the parent organizationId
 @return ApiGetParentDataRetentionPoliciesRequest
*/
func (a *DataRetentionPoliciesAPIService) GetParentDataRetentionPolicies(ctx context.Context, organizationId string) ApiGetParentDataRetentionPoliciesRequest {
	return ApiGetParentDataRetentionPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return ApiDataRetentionPoliciesDTO
func (a *DataRetentionPoliciesAPIService) GetParentDataRetentionPoliciesExecute(r ApiGetParentDataRetentionPoliciesRequest) (*ApiDataRetentionPoliciesDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiDataRetentionPoliciesDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataRetentionPoliciesAPIService.GetParentDataRetentionPolicies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/dataRetentionPolicies/organizations/{organizationId}/parent"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetDataRetentionPoliciesRequest struct {
	ctx context.Context
	ApiService *DataRetentionPoliciesAPIService
	organizationId string
	apiDataRetentionPoliciesDTO *ApiDataRetentionPoliciesDTO
}

// The request JSON should include the retention policy settings for both application reports and success metrics.  Policy settings for application reports can be specified for each stage of development represented in the example below by additionalProp1.  Example values for additionalProp1 are develop, build, stage-release, release, operate &amp; continuous monitoring. For application reports created during continuous monitoring use the key continuous-monitoring instead of the stage name. &lt;ul&gt;&lt;li&gt;inheritPolicy IS a boolean flag indicating whether the policy is inherited from a parent organization.&lt;/li&gt;&lt;li&gt;enablePurging IS a boolean flag indicating enabled or disabled status for automatic purging. &lt;/li&gt;&lt;li&gt;maxCount IS the maximum no. of reports to retain.&lt;/li&gt;&lt;li&gt;maxAge IS the maximum age that a report is allowed to reach before it is purged. Possible values are days, weeks, months, years.&lt;/li&gt;&lt;/ul&gt;
func (r ApiSetDataRetentionPoliciesRequest) ApiDataRetentionPoliciesDTO(apiDataRetentionPoliciesDTO ApiDataRetentionPoliciesDTO) ApiSetDataRetentionPoliciesRequest {
	r.apiDataRetentionPoliciesDTO = &apiDataRetentionPoliciesDTO
	return r
}

func (r ApiSetDataRetentionPoliciesRequest) Execute() (*http.Response, error) {
	return r.ApiService.SetDataRetentionPoliciesExecute(r)
}

/*
SetDataRetentionPolicies Method for SetDataRetentionPolicies

Data retention policies help to limit the disk space consumption by removing obsolete data. Use this method to set the retention policies for an organization. Application reports created by continuous monitoring are not affected by the stage retention policy. They appear separately under the key continuous-monitoring.<p>Permissions required: Edit IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId The organizationId for the organization you want to set the data retention policy. Use the organization REST API to retrieve the organizationId.
 @return ApiSetDataRetentionPoliciesRequest
*/
func (a *DataRetentionPoliciesAPIService) SetDataRetentionPolicies(ctx context.Context, organizationId string) ApiSetDataRetentionPoliciesRequest {
	return ApiSetDataRetentionPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
func (a *DataRetentionPoliciesAPIService) SetDataRetentionPoliciesExecute(r ApiSetDataRetentionPoliciesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataRetentionPoliciesAPIService.SetDataRetentionPolicies")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/dataRetentionPolicies/organizations/{organizationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiDataRetentionPoliciesDTO == nil {
		return nil, reportError("apiDataRetentionPoliciesDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiDataRetentionPoliciesDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
