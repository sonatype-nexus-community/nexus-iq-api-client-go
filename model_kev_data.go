/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.196.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the KevData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KevData{}

// KevData struct for KevData
type KevData struct {
	IsKev *bool `json:"isKev,omitempty"`
}

// NewKevData instantiates a new KevData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKevData() *KevData {
	this := KevData{}
	return &this
}

// NewKevDataWithDefaults instantiates a new KevData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKevDataWithDefaults() *KevData {
	this := KevData{}
	return &this
}

// GetIsKev returns the IsKev field value if set, zero value otherwise.
func (o *KevData) GetIsKev() bool {
	if o == nil || IsNil(o.IsKev) {
		var ret bool
		return ret
	}
	return *o.IsKev
}

// GetIsKevOk returns a tuple with the IsKev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KevData) GetIsKevOk() (*bool, bool) {
	if o == nil || IsNil(o.IsKev) {
		return nil, false
	}
	return o.IsKev, true
}

// HasIsKev returns a boolean if a field has been set.
func (o *KevData) HasIsKev() bool {
	if o != nil && !IsNil(o.IsKev) {
		return true
	}

	return false
}

// SetIsKev gets a reference to the given bool and assigns it to the IsKev field.
func (o *KevData) SetIsKev(v bool) {
	o.IsKev = &v
}

func (o KevData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KevData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsKev) {
		toSerialize["isKev"] = o.IsKev
	}
	return toSerialize, nil
}

type NullableKevData struct {
	value *KevData
	isSet bool
}

func (v NullableKevData) Get() *KevData {
	return v.value
}

func (v *NullableKevData) Set(val *KevData) {
	v.value = val
	v.isSet = true
}

func (v NullableKevData) IsSet() bool {
	return v.isSet
}

func (v *NullableKevData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKevData(val *KevData) *NullableKevData {
	return &NullableKevData{value: val, isSet: true}
}

func (v NullableKevData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKevData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


