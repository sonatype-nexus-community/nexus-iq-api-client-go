/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.196.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// LicenseLegalMetadataTemplateAPIService LicenseLegalMetadataTemplateAPI service
type LicenseLegalMetadataTemplateAPIService service

type ApiDeleteAttributionReportTemplateRequest struct {
	ctx context.Context
	ApiService *LicenseLegalMetadataTemplateAPIService
	id string
}

func (r ApiDeleteAttributionReportTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAttributionReportTemplateExecute(r)
}

/*
DeleteAttributionReportTemplate Method for DeleteAttributionReportTemplate

Use this method to delete an existing template.

Permissions required: Review Legal Obligations For Components Licenses for the root organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enter the template id for the template to be deleted.
 @return ApiDeleteAttributionReportTemplateRequest
*/
func (a *LicenseLegalMetadataTemplateAPIService) DeleteAttributionReportTemplate(ctx context.Context, id string) ApiDeleteAttributionReportTemplateRequest {
	return ApiDeleteAttributionReportTemplateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *LicenseLegalMetadataTemplateAPIService) DeleteAttributionReportTemplateExecute(r ApiDeleteAttributionReportTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseLegalMetadataTemplateAPIService.DeleteAttributionReportTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseLegalMetadata/report-template/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllAttributionReportTemplatesRequest struct {
	ctx context.Context
	ApiService *LicenseLegalMetadataTemplateAPIService
}

func (r ApiGetAllAttributionReportTemplatesRequest) Execute() ([]AttributionReportTemplateDTO, *http.Response, error) {
	return r.ApiService.GetAllAttributionReportTemplatesExecute(r)
}

/*
GetAllAttributionReportTemplates Method for GetAllAttributionReportTemplates

Use this method to retrieve templates for all reports.

Permissions required: Review Legal Obligations For Components Licenses for the root organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllAttributionReportTemplatesRequest
*/
func (a *LicenseLegalMetadataTemplateAPIService) GetAllAttributionReportTemplates(ctx context.Context) ApiGetAllAttributionReportTemplatesRequest {
	return ApiGetAllAttributionReportTemplatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AttributionReportTemplateDTO
func (a *LicenseLegalMetadataTemplateAPIService) GetAllAttributionReportTemplatesExecute(r ApiGetAllAttributionReportTemplatesRequest) ([]AttributionReportTemplateDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AttributionReportTemplateDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseLegalMetadataTemplateAPIService.GetAllAttributionReportTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseLegalMetadata/report-template"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAttributionReportTemplateByIdRequest struct {
	ctx context.Context
	ApiService *LicenseLegalMetadataTemplateAPIService
	id string
}

func (r ApiGetAttributionReportTemplateByIdRequest) Execute() (*AttributionReportTemplateDTO, *http.Response, error) {
	return r.ApiService.GetAttributionReportTemplateByIdExecute(r)
}

/*
GetAttributionReportTemplateById Method for GetAttributionReportTemplateById

Use this method to retrieve a template for license legal metadata.

Permissions required: Review Legal Obligations For Components Licenses for the root organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Enter the templateId for the report.
 @return ApiGetAttributionReportTemplateByIdRequest
*/
func (a *LicenseLegalMetadataTemplateAPIService) GetAttributionReportTemplateById(ctx context.Context, id string) ApiGetAttributionReportTemplateByIdRequest {
	return ApiGetAttributionReportTemplateByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AttributionReportTemplateDTO
func (a *LicenseLegalMetadataTemplateAPIService) GetAttributionReportTemplateByIdExecute(r ApiGetAttributionReportTemplateByIdRequest) (*AttributionReportTemplateDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AttributionReportTemplateDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseLegalMetadataTemplateAPIService.GetAttributionReportTemplateById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseLegalMetadata/report-template/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSaveAttributionReportTemplateRequest struct {
	ctx context.Context
	ApiService *LicenseLegalMetadataTemplateAPIService
	attributionReportTemplateDTO *AttributionReportTemplateDTO
}

// Specify the details for the template as:&lt;ul&gt;&lt;li&gt;&#x60;id&#x60; is the template id.&lt;/li&gt;&lt;li&gt;&#x60;templateName&#x60; indicates the name of the stored template.&lt;/li&gt;&lt;li&gt;&#x60;documentTitle&#x60; is the title that is displayed at the top of the report.&lt;/li&gt;&lt;li&gt;&#x60;header&#x60; is the text that will be displayed above the &#x60;documentTitle&#x60;.&lt;/li&gt;&lt;li&gt;&#x60;footer&#x60; is the text that will be displayed at the bottom of the report.&lt;li&gt;&lt;li&gt;&#x60;includeTableOfContents&#x60; is &#x60;true&#x60; if a table of contents containing links to the components and their licenses will be added to the report.&lt;li&gt;&#x60;includeAppendix&#x60; is &#x60;true&#x60; if standard license text will be grouped in the report appendix.&lt;/li&gt;&lt;li&gt;&#x60;includeStandardLicenseTexts&#x60; is &#x60;true&#x60; if the standard license text will be displayed for components with no license files.&lt;/li&gt;&lt;li&gt;&#x60;includeSonatypeSpecialLicenses&#x60; is &#x60;true&#x60; if Sonatype Special Licenses (e.g. Generic-Copyleft-Clause, Generic-Liberal-Clause, See-License-Clause, Identity-Clause etc.) will be included in the report.&lt;/li&gt;&lt;li&gt;&#x60;includeInnerSource&#x60; is &#x60;true&#x60; if InnerSource components will be included in the report.&lt;/li&gt;&lt;/ul&gt;
func (r ApiSaveAttributionReportTemplateRequest) AttributionReportTemplateDTO(attributionReportTemplateDTO AttributionReportTemplateDTO) ApiSaveAttributionReportTemplateRequest {
	r.attributionReportTemplateDTO = &attributionReportTemplateDTO
	return r
}

func (r ApiSaveAttributionReportTemplateRequest) Execute() (*AttributionReportTemplateDTO, *http.Response, error) {
	return r.ApiService.SaveAttributionReportTemplateExecute(r)
}

/*
SaveAttributionReportTemplate Method for SaveAttributionReportTemplate

Use this method to create or update a template.

Permissions required: Review Legal Obligations For Components Licenses for the root organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSaveAttributionReportTemplateRequest
*/
func (a *LicenseLegalMetadataTemplateAPIService) SaveAttributionReportTemplate(ctx context.Context) ApiSaveAttributionReportTemplateRequest {
	return ApiSaveAttributionReportTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AttributionReportTemplateDTO
func (a *LicenseLegalMetadataTemplateAPIService) SaveAttributionReportTemplateExecute(r ApiSaveAttributionReportTemplateRequest) (*AttributionReportTemplateDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AttributionReportTemplateDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseLegalMetadataTemplateAPIService.SaveAttributionReportTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseLegalMetadata/report-template"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.attributionReportTemplateDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
