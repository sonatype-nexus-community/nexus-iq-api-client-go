/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.184.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AutoPolicyWaiverRevocationsAPIService AutoPolicyWaiverRevocationsAPI service
type AutoPolicyWaiverRevocationsAPIService service

type ApiAddAutoPolicyWaiverRevocationRequest struct {
	ctx context.Context
	ApiService *AutoPolicyWaiverRevocationsAPIService
	ownerType string
	ownerId string
	apiAutoPolicyWaiverRevocationDTO *ApiAutoPolicyWaiverRevocationDTO
}

// The request JSON can include the fields&lt;ol&gt;&lt;li&gt;autoPolicyWaiverId&lt;/li&gt;&lt;li&gt;hash&lt;/li&gt;&lt;li&gt;scanId&lt;/li&gt;&lt;/ol&gt;
func (r ApiAddAutoPolicyWaiverRevocationRequest) ApiAutoPolicyWaiverRevocationDTO(apiAutoPolicyWaiverRevocationDTO ApiAutoPolicyWaiverRevocationDTO) ApiAddAutoPolicyWaiverRevocationRequest {
	r.apiAutoPolicyWaiverRevocationDTO = &apiAutoPolicyWaiverRevocationDTO
	return r
}

func (r ApiAddAutoPolicyWaiverRevocationRequest) Execute() (*ApiAutoPolicyWaiverRevocationDTO, *http.Response, error) {
	return r.ApiService.AddAutoPolicyWaiverRevocationExecute(r)
}

/*
AddAutoPolicyWaiverRevocation Method for AddAutoPolicyWaiverRevocation

Use this method to create an auto policy waiver revocation for a specified auto policy waiver.

Permissions required: Waive Policy Violations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the ownerType to specify the scope.
 @param ownerId Enter the corresponding id for the ownerType specified above.
 @return ApiAddAutoPolicyWaiverRevocationRequest
*/
func (a *AutoPolicyWaiverRevocationsAPIService) AddAutoPolicyWaiverRevocation(ctx context.Context, ownerType string, ownerId string) ApiAddAutoPolicyWaiverRevocationRequest {
	return ApiAddAutoPolicyWaiverRevocationRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
	}
}

// Execute executes the request
//  @return ApiAutoPolicyWaiverRevocationDTO
func (a *AutoPolicyWaiverRevocationsAPIService) AddAutoPolicyWaiverRevocationExecute(r ApiAddAutoPolicyWaiverRevocationRequest) (*ApiAutoPolicyWaiverRevocationDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiAutoPolicyWaiverRevocationDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoPolicyWaiverRevocationsAPIService.AddAutoPolicyWaiverRevocation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/autoPolicyWaiverRevocations/{ownerType}/{ownerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiAutoPolicyWaiverRevocationDTO == nil {
		return localVarReturnValue, nil, reportError("apiAutoPolicyWaiverRevocationDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiAutoPolicyWaiverRevocationDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAutoPolicyWaiverRevocationRequest struct {
	ctx context.Context
	ApiService *AutoPolicyWaiverRevocationsAPIService
	ownerType string
	ownerId string
	autoPolicyWaiverRevocationId string
}

func (r ApiDeleteAutoPolicyWaiverRevocationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAutoPolicyWaiverRevocationExecute(r)
}

/*
DeleteAutoPolicyWaiverRevocation Method for DeleteAutoPolicyWaiverRevocation

Use this method to delete an auto policy waiver revocation, specified by the autoPolicyWaiverRevocationId.

Permissions required: Waive Policy Violations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the ownerType to specify the scope. A waiver revocation corresponding to the autoPolicyWaiverRevocationId provided and within the scope specified will be deleted.
 @param ownerId Enter the corresponding id for the ownerType specified above.
 @param autoPolicyWaiverRevocationId Enter the autoPolicyWaiverId to be deleted
 @return ApiDeleteAutoPolicyWaiverRevocationRequest
*/
func (a *AutoPolicyWaiverRevocationsAPIService) DeleteAutoPolicyWaiverRevocation(ctx context.Context, ownerType string, ownerId string, autoPolicyWaiverRevocationId string) ApiDeleteAutoPolicyWaiverRevocationRequest {
	return ApiDeleteAutoPolicyWaiverRevocationRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
		autoPolicyWaiverRevocationId: autoPolicyWaiverRevocationId,
	}
}

// Execute executes the request
func (a *AutoPolicyWaiverRevocationsAPIService) DeleteAutoPolicyWaiverRevocationExecute(r ApiDeleteAutoPolicyWaiverRevocationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoPolicyWaiverRevocationsAPIService.DeleteAutoPolicyWaiverRevocation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/autoPolicyWaiverRevocations/{ownerType}/{ownerId}/{autoPolicyWaiverRevocationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"autoPolicyWaiverRevocationId"+"}", url.PathEscape(parameterValueToString(r.autoPolicyWaiverRevocationId, "autoPolicyWaiverRevocationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
