/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.196.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
	"os"
	"bytes"
	"fmt"
)

// checks if the InsertOrUpdateSamlConfigurationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InsertOrUpdateSamlConfigurationRequest{}

// InsertOrUpdateSamlConfigurationRequest struct for InsertOrUpdateSamlConfigurationRequest
type InsertOrUpdateSamlConfigurationRequest struct {
	// Enter the SAML metadata XML of your IdP. Refer to the IdP documentation to obtain this metadata.
	IdentityProviderXml *os.File `json:"identityProviderXml"`
	SamlConfiguration ApiSamlConfigurationDTO `json:"samlConfiguration"`
}

type _InsertOrUpdateSamlConfigurationRequest InsertOrUpdateSamlConfigurationRequest

// NewInsertOrUpdateSamlConfigurationRequest instantiates a new InsertOrUpdateSamlConfigurationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsertOrUpdateSamlConfigurationRequest(identityProviderXml *os.File, samlConfiguration ApiSamlConfigurationDTO) *InsertOrUpdateSamlConfigurationRequest {
	this := InsertOrUpdateSamlConfigurationRequest{}
	this.IdentityProviderXml = identityProviderXml
	this.SamlConfiguration = samlConfiguration
	return &this
}

// NewInsertOrUpdateSamlConfigurationRequestWithDefaults instantiates a new InsertOrUpdateSamlConfigurationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsertOrUpdateSamlConfigurationRequestWithDefaults() *InsertOrUpdateSamlConfigurationRequest {
	this := InsertOrUpdateSamlConfigurationRequest{}
	return &this
}

// GetIdentityProviderXml returns the IdentityProviderXml field value
func (o *InsertOrUpdateSamlConfigurationRequest) GetIdentityProviderXml() *os.File {
	if o == nil {
		var ret *os.File
		return ret
	}

	return o.IdentityProviderXml
}

// GetIdentityProviderXmlOk returns a tuple with the IdentityProviderXml field value
// and a boolean to check if the value has been set.
func (o *InsertOrUpdateSamlConfigurationRequest) GetIdentityProviderXmlOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentityProviderXml, true
}

// SetIdentityProviderXml sets field value
func (o *InsertOrUpdateSamlConfigurationRequest) SetIdentityProviderXml(v *os.File) {
	o.IdentityProviderXml = v
}

// GetSamlConfiguration returns the SamlConfiguration field value
func (o *InsertOrUpdateSamlConfigurationRequest) GetSamlConfiguration() ApiSamlConfigurationDTO {
	if o == nil {
		var ret ApiSamlConfigurationDTO
		return ret
	}

	return o.SamlConfiguration
}

// GetSamlConfigurationOk returns a tuple with the SamlConfiguration field value
// and a boolean to check if the value has been set.
func (o *InsertOrUpdateSamlConfigurationRequest) GetSamlConfigurationOk() (*ApiSamlConfigurationDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SamlConfiguration, true
}

// SetSamlConfiguration sets field value
func (o *InsertOrUpdateSamlConfigurationRequest) SetSamlConfiguration(v ApiSamlConfigurationDTO) {
	o.SamlConfiguration = v
}

func (o InsertOrUpdateSamlConfigurationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InsertOrUpdateSamlConfigurationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identityProviderXml"] = o.IdentityProviderXml
	toSerialize["samlConfiguration"] = o.SamlConfiguration
	return toSerialize, nil
}

func (o *InsertOrUpdateSamlConfigurationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identityProviderXml",
		"samlConfiguration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInsertOrUpdateSamlConfigurationRequest := _InsertOrUpdateSamlConfigurationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInsertOrUpdateSamlConfigurationRequest)

	if err != nil {
		return err
	}

	*o = InsertOrUpdateSamlConfigurationRequest(varInsertOrUpdateSamlConfigurationRequest)

	return err
}

type NullableInsertOrUpdateSamlConfigurationRequest struct {
	value *InsertOrUpdateSamlConfigurationRequest
	isSet bool
}

func (v NullableInsertOrUpdateSamlConfigurationRequest) Get() *InsertOrUpdateSamlConfigurationRequest {
	return v.value
}

func (v *NullableInsertOrUpdateSamlConfigurationRequest) Set(val *InsertOrUpdateSamlConfigurationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInsertOrUpdateSamlConfigurationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInsertOrUpdateSamlConfigurationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsertOrUpdateSamlConfigurationRequest(val *InsertOrUpdateSamlConfigurationRequest) *NullableInsertOrUpdateSamlConfigurationRequest {
	return &NullableInsertOrUpdateSamlConfigurationRequest{value: val, isSet: true}
}

func (v NullableInsertOrUpdateSamlConfigurationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsertOrUpdateSamlConfigurationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


