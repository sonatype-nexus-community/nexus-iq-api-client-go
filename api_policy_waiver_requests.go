/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.195.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PolicyWaiverRequestsAPIService PolicyWaiverRequestsAPI service
type PolicyWaiverRequestsAPIService service

type ApiAddPolicyWaiverRequestByPolicyViolationIdRequest struct {
	ctx context.Context
	ApiService *PolicyWaiverRequestsAPIService
	ownerType string
	ownerId string
	policyViolationId string
	apiPolicyWaiverRequestOptionsDTO *ApiPolicyWaiverRequestOptionsDTO
}

// The request JSON can include the fields&lt;ol&gt;&lt;li&gt;comment (optional, to indicate the reason of the waiver) default value is null&lt;/li&gt;&lt;li&gt;matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.&lt;/li&gt;&lt;li&gt;expiryTime (default null) to set the datetime when the waiver expires.&lt;/li&gt;&lt;li&gt;expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.&lt;/li&gt;&lt;li&gt;noteToReviewer (optional) to add a note to the reviewer&lt;/li&gt;&lt;/ol&gt;
func (r ApiAddPolicyWaiverRequestByPolicyViolationIdRequest) ApiPolicyWaiverRequestOptionsDTO(apiPolicyWaiverRequestOptionsDTO ApiPolicyWaiverRequestOptionsDTO) ApiAddPolicyWaiverRequestByPolicyViolationIdRequest {
	r.apiPolicyWaiverRequestOptionsDTO = &apiPolicyWaiverRequestOptionsDTO
	return r
}

func (r ApiAddPolicyWaiverRequestByPolicyViolationIdRequest) Execute() (*ApiPolicyWaiverRequestDTO, *http.Response, error) {
	return r.ApiService.AddPolicyWaiverRequestByPolicyViolationIdExecute(r)
}

/*
AddPolicyWaiverRequestByPolicyViolationId Method for AddPolicyWaiverRequestByPolicyViolationId

Use this method to create a policy waiver request.

Permissions required: View IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.
 @param ownerId The id for the ownerType provided above. E.g. applicationId if the ownerType is application.
 @param policyViolationId The policyViolationId for the policy violation on which you want to create a policy waiver request. Use the Policy Violation REST API or Reports REST API to obtain the policyViolationId.
 @return ApiAddPolicyWaiverRequestByPolicyViolationIdRequest
*/
func (a *PolicyWaiverRequestsAPIService) AddPolicyWaiverRequestByPolicyViolationId(ctx context.Context, ownerType string, ownerId string, policyViolationId string) ApiAddPolicyWaiverRequestByPolicyViolationIdRequest {
	return ApiAddPolicyWaiverRequestByPolicyViolationIdRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
		policyViolationId: policyViolationId,
	}
}

// Execute executes the request
//  @return ApiPolicyWaiverRequestDTO
func (a *PolicyWaiverRequestsAPIService) AddPolicyWaiverRequestByPolicyViolationIdExecute(r ApiAddPolicyWaiverRequestByPolicyViolationIdRequest) (*ApiPolicyWaiverRequestDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiPolicyWaiverRequestDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyWaiverRequestsAPIService.AddPolicyWaiverRequestByPolicyViolationId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/policyWaiverRequests/{ownerType}/{ownerId}/policyViolation/{policyViolationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyViolationId"+"}", url.PathEscape(parameterValueToString(r.policyViolationId, "policyViolationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiPolicyWaiverRequestOptionsDTO == nil {
		return localVarReturnValue, nil, reportError("apiPolicyWaiverRequestOptionsDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiPolicyWaiverRequestOptionsDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPolicyWaiverRequestRequest struct {
	ctx context.Context
	ApiService *PolicyWaiverRequestsAPIService
	ownerType string
	ownerId string
	policyWaiverRequestId string
}

func (r ApiGetPolicyWaiverRequestRequest) Execute() (*ApiPolicyWaiverRequestDTO, *http.Response, error) {
	return r.ApiService.GetPolicyWaiverRequestExecute(r)
}

/*
GetPolicyWaiverRequest Method for GetPolicyWaiverRequest

Use this method to retrieve policy waiver request details for the policyWaiverRequestId specified.

Permissions required: View IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.
 @param ownerId The id for the ownerType provided above.
 @param policyWaiverRequestId The policyWaiverRequestId for which you want to retrieve the details.
 @return ApiGetPolicyWaiverRequestRequest
*/
func (a *PolicyWaiverRequestsAPIService) GetPolicyWaiverRequest(ctx context.Context, ownerType string, ownerId string, policyWaiverRequestId string) ApiGetPolicyWaiverRequestRequest {
	return ApiGetPolicyWaiverRequestRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
		policyWaiverRequestId: policyWaiverRequestId,
	}
}

// Execute executes the request
//  @return ApiPolicyWaiverRequestDTO
func (a *PolicyWaiverRequestsAPIService) GetPolicyWaiverRequestExecute(r ApiGetPolicyWaiverRequestRequest) (*ApiPolicyWaiverRequestDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiPolicyWaiverRequestDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyWaiverRequestsAPIService.GetPolicyWaiverRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/policyWaiverRequests/{ownerType}/{ownerId}/{policyWaiverRequestId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyWaiverRequestId"+"}", url.PathEscape(parameterValueToString(r.policyWaiverRequestId, "policyWaiverRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReviewPolicyWaiverRequestRequest struct {
	ctx context.Context
	ApiService *PolicyWaiverRequestsAPIService
	ownerType string
	ownerId string
	policyWaiverRequestId string
	apiPolicyWaiverRequestReviewDTO *ApiPolicyWaiverRequestReviewDTO
}

// The request JSON can include the fields&lt;ol&gt;&lt;li&gt;status. Can be APPROVED or REJECTED&lt;/li&gt;&lt;li&gt;rejectionReason (optional). A text explaining the reason for the rejection., &lt;li&gt;comment (optional, to indicate the reason of the waiver) default value is null&lt;/li&gt;&lt;li&gt;matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.&lt;/li&gt;&lt;li&gt;expiryTime (default null) to set the datetime when the waiver expires.&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.&lt;/li&gt;
func (r ApiReviewPolicyWaiverRequestRequest) ApiPolicyWaiverRequestReviewDTO(apiPolicyWaiverRequestReviewDTO ApiPolicyWaiverRequestReviewDTO) ApiReviewPolicyWaiverRequestRequest {
	r.apiPolicyWaiverRequestReviewDTO = &apiPolicyWaiverRequestReviewDTO
	return r
}

func (r ApiReviewPolicyWaiverRequestRequest) Execute() (*ApiPolicyWaiverRequestDTO, *http.Response, error) {
	return r.ApiService.ReviewPolicyWaiverRequestExecute(r)
}

/*
ReviewPolicyWaiverRequest Method for ReviewPolicyWaiverRequest

Use this method to approve or reject a policy waiver request.

Permissions required: Waive Policy Violations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.
 @param ownerId The id for the ownerType provided above. E.g. applicationId if the ownerType is application.
 @param policyWaiverRequestId The policyWaiverRequestId for the policy waiver request to be approved or rejected.
 @return ApiReviewPolicyWaiverRequestRequest
*/
func (a *PolicyWaiverRequestsAPIService) ReviewPolicyWaiverRequest(ctx context.Context, ownerType string, ownerId string, policyWaiverRequestId string) ApiReviewPolicyWaiverRequestRequest {
	return ApiReviewPolicyWaiverRequestRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
		policyWaiverRequestId: policyWaiverRequestId,
	}
}

// Execute executes the request
//  @return ApiPolicyWaiverRequestDTO
func (a *PolicyWaiverRequestsAPIService) ReviewPolicyWaiverRequestExecute(r ApiReviewPolicyWaiverRequestRequest) (*ApiPolicyWaiverRequestDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiPolicyWaiverRequestDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyWaiverRequestsAPIService.ReviewPolicyWaiverRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/policyWaiverRequests/{ownerType}/{ownerId}/review/{policyWaiverRequestId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyWaiverRequestId"+"}", url.PathEscape(parameterValueToString(r.policyWaiverRequestId, "policyWaiverRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiPolicyWaiverRequestReviewDTO == nil {
		return localVarReturnValue, nil, reportError("apiPolicyWaiverRequestReviewDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiPolicyWaiverRequestReviewDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePolicyWaiverRequestRequest struct {
	ctx context.Context
	ApiService *PolicyWaiverRequestsAPIService
	ownerType string
	ownerId string
	policyWaiverRequestId string
	apiPolicyWaiverRequestOptionsDTO *ApiPolicyWaiverRequestOptionsDTO
}

// The request JSON can include the fields&lt;ol&gt;&lt;li&gt;comment (optional, to indicate the reason of the waiver) default value is null&lt;/li&gt;&lt;li&gt;matcherStrategy (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. DEFAULT will match all components if no hash is provided.&lt;/li&gt;&lt;li&gt;expiryTime (default null) to set the datetime when the waiver expires.&lt;/li&gt;&lt;li&gt;expireWhenRemediationAvailable (default false) to expire the waiver when a remediation is available.&lt;/li&gt;&lt;li&gt;noteToReviewer (optional) to add a note to the reviewer&lt;/li&gt;&lt;/ol&gt;
func (r ApiUpdatePolicyWaiverRequestRequest) ApiPolicyWaiverRequestOptionsDTO(apiPolicyWaiverRequestOptionsDTO ApiPolicyWaiverRequestOptionsDTO) ApiUpdatePolicyWaiverRequestRequest {
	r.apiPolicyWaiverRequestOptionsDTO = &apiPolicyWaiverRequestOptionsDTO
	return r
}

func (r ApiUpdatePolicyWaiverRequestRequest) Execute() (*ApiPolicyWaiverRequestDTO, *http.Response, error) {
	return r.ApiService.UpdatePolicyWaiverRequestExecute(r)
}

/*
UpdatePolicyWaiverRequest Method for UpdatePolicyWaiverRequest

Use this method to update a policy waiver request.

Permissions required: View IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType The scope of the policy waiver request. Possible values are application, organization, repository, repository_manager, repository_container.
 @param ownerId The id for the ownerType provided above. E.g. applicationId if the ownerType is application.
 @param policyWaiverRequestId The id of the policy waiver request to be updated.
 @return ApiUpdatePolicyWaiverRequestRequest
*/
func (a *PolicyWaiverRequestsAPIService) UpdatePolicyWaiverRequest(ctx context.Context, ownerType string, ownerId string, policyWaiverRequestId string) ApiUpdatePolicyWaiverRequestRequest {
	return ApiUpdatePolicyWaiverRequestRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
		policyWaiverRequestId: policyWaiverRequestId,
	}
}

// Execute executes the request
//  @return ApiPolicyWaiverRequestDTO
func (a *PolicyWaiverRequestsAPIService) UpdatePolicyWaiverRequestExecute(r ApiUpdatePolicyWaiverRequestRequest) (*ApiPolicyWaiverRequestDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiPolicyWaiverRequestDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PolicyWaiverRequestsAPIService.UpdatePolicyWaiverRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/policyWaiverRequests/{ownerType}/{ownerId}/{policyWaiverRequestId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyWaiverRequestId"+"}", url.PathEscape(parameterValueToString(r.policyWaiverRequestId, "policyWaiverRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiPolicyWaiverRequestOptionsDTO == nil {
		return localVarReturnValue, nil, reportError("apiPolicyWaiverRequestOptionsDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiPolicyWaiverRequestOptionsDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
