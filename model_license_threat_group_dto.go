/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.196.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the LicenseThreatGroupDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseThreatGroupDTO{}

// LicenseThreatGroupDTO struct for LicenseThreatGroupDTO
type LicenseThreatGroupDTO struct {
	Name *string `json:"name,omitempty"`
	ThreatLevel *int32 `json:"threatLevel,omitempty"`
}

// NewLicenseThreatGroupDTO instantiates a new LicenseThreatGroupDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseThreatGroupDTO() *LicenseThreatGroupDTO {
	this := LicenseThreatGroupDTO{}
	return &this
}

// NewLicenseThreatGroupDTOWithDefaults instantiates a new LicenseThreatGroupDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseThreatGroupDTOWithDefaults() *LicenseThreatGroupDTO {
	this := LicenseThreatGroupDTO{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LicenseThreatGroupDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseThreatGroupDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LicenseThreatGroupDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LicenseThreatGroupDTO) SetName(v string) {
	o.Name = &v
}

// GetThreatLevel returns the ThreatLevel field value if set, zero value otherwise.
func (o *LicenseThreatGroupDTO) GetThreatLevel() int32 {
	if o == nil || IsNil(o.ThreatLevel) {
		var ret int32
		return ret
	}
	return *o.ThreatLevel
}

// GetThreatLevelOk returns a tuple with the ThreatLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseThreatGroupDTO) GetThreatLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.ThreatLevel) {
		return nil, false
	}
	return o.ThreatLevel, true
}

// HasThreatLevel returns a boolean if a field has been set.
func (o *LicenseThreatGroupDTO) HasThreatLevel() bool {
	if o != nil && !IsNil(o.ThreatLevel) {
		return true
	}

	return false
}

// SetThreatLevel gets a reference to the given int32 and assigns it to the ThreatLevel field.
func (o *LicenseThreatGroupDTO) SetThreatLevel(v int32) {
	o.ThreatLevel = &v
}

func (o LicenseThreatGroupDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseThreatGroupDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ThreatLevel) {
		toSerialize["threatLevel"] = o.ThreatLevel
	}
	return toSerialize, nil
}

type NullableLicenseThreatGroupDTO struct {
	value *LicenseThreatGroupDTO
	isSet bool
}

func (v NullableLicenseThreatGroupDTO) Get() *LicenseThreatGroupDTO {
	return v.value
}

func (v *NullableLicenseThreatGroupDTO) Set(val *LicenseThreatGroupDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseThreatGroupDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseThreatGroupDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseThreatGroupDTO(val *LicenseThreatGroupDTO) *NullableLicenseThreatGroupDTO {
	return &NullableLicenseThreatGroupDTO{value: val, isSet: true}
}

func (v NullableLicenseThreatGroupDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseThreatGroupDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


