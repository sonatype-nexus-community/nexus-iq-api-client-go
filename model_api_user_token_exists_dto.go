/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.192.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the ApiUserTokenExistsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiUserTokenExistsDTO{}

// ApiUserTokenExistsDTO struct for ApiUserTokenExistsDTO
type ApiUserTokenExistsDTO struct {
	UserTokenExists *bool `json:"userTokenExists,omitempty"`
}

// NewApiUserTokenExistsDTO instantiates a new ApiUserTokenExistsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiUserTokenExistsDTO() *ApiUserTokenExistsDTO {
	this := ApiUserTokenExistsDTO{}
	return &this
}

// NewApiUserTokenExistsDTOWithDefaults instantiates a new ApiUserTokenExistsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiUserTokenExistsDTOWithDefaults() *ApiUserTokenExistsDTO {
	this := ApiUserTokenExistsDTO{}
	return &this
}

// GetUserTokenExists returns the UserTokenExists field value if set, zero value otherwise.
func (o *ApiUserTokenExistsDTO) GetUserTokenExists() bool {
	if o == nil || IsNil(o.UserTokenExists) {
		var ret bool
		return ret
	}
	return *o.UserTokenExists
}

// GetUserTokenExistsOk returns a tuple with the UserTokenExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUserTokenExistsDTO) GetUserTokenExistsOk() (*bool, bool) {
	if o == nil || IsNil(o.UserTokenExists) {
		return nil, false
	}
	return o.UserTokenExists, true
}

// HasUserTokenExists returns a boolean if a field has been set.
func (o *ApiUserTokenExistsDTO) HasUserTokenExists() bool {
	if o != nil && !IsNil(o.UserTokenExists) {
		return true
	}

	return false
}

// SetUserTokenExists gets a reference to the given bool and assigns it to the UserTokenExists field.
func (o *ApiUserTokenExistsDTO) SetUserTokenExists(v bool) {
	o.UserTokenExists = &v
}

func (o ApiUserTokenExistsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiUserTokenExistsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserTokenExists) {
		toSerialize["userTokenExists"] = o.UserTokenExists
	}
	return toSerialize, nil
}

type NullableApiUserTokenExistsDTO struct {
	value *ApiUserTokenExistsDTO
	isSet bool
}

func (v NullableApiUserTokenExistsDTO) Get() *ApiUserTokenExistsDTO {
	return v.value
}

func (v *NullableApiUserTokenExistsDTO) Set(val *ApiUserTokenExistsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableApiUserTokenExistsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableApiUserTokenExistsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiUserTokenExistsDTO(val *ApiUserTokenExistsDTO) *NullableApiUserTokenExistsDTO {
	return &NullableApiUserTokenExistsDTO{value: val, isSet: true}
}

func (v NullableApiUserTokenExistsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiUserTokenExistsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


