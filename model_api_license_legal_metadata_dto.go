/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.195.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the ApiLicenseLegalMetadataDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiLicenseLegalMetadataDTO{}

// ApiLicenseLegalMetadataDTO struct for ApiLicenseLegalMetadataDTO
type ApiLicenseLegalMetadataDTO struct {
	IsMulti *bool `json:"isMulti,omitempty"`
	LicenseId *string `json:"licenseId,omitempty"`
	LicenseName *string `json:"licenseName,omitempty"`
	LicenseText *string `json:"licenseText,omitempty"`
	Obligations []LicenseObligationDTO `json:"obligations,omitempty"`
	SingleLicenseIds []string `json:"singleLicenseIds,omitempty"`
	ThreatGroup *LicenseThreatGroupDTO `json:"threatGroup,omitempty"`
}

// NewApiLicenseLegalMetadataDTO instantiates a new ApiLicenseLegalMetadataDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiLicenseLegalMetadataDTO() *ApiLicenseLegalMetadataDTO {
	this := ApiLicenseLegalMetadataDTO{}
	return &this
}

// NewApiLicenseLegalMetadataDTOWithDefaults instantiates a new ApiLicenseLegalMetadataDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiLicenseLegalMetadataDTOWithDefaults() *ApiLicenseLegalMetadataDTO {
	this := ApiLicenseLegalMetadataDTO{}
	return &this
}

// GetIsMulti returns the IsMulti field value if set, zero value otherwise.
func (o *ApiLicenseLegalMetadataDTO) GetIsMulti() bool {
	if o == nil || IsNil(o.IsMulti) {
		var ret bool
		return ret
	}
	return *o.IsMulti
}

// GetIsMultiOk returns a tuple with the IsMulti field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiLicenseLegalMetadataDTO) GetIsMultiOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMulti) {
		return nil, false
	}
	return o.IsMulti, true
}

// HasIsMulti returns a boolean if a field has been set.
func (o *ApiLicenseLegalMetadataDTO) HasIsMulti() bool {
	if o != nil && !IsNil(o.IsMulti) {
		return true
	}

	return false
}

// SetIsMulti gets a reference to the given bool and assigns it to the IsMulti field.
func (o *ApiLicenseLegalMetadataDTO) SetIsMulti(v bool) {
	o.IsMulti = &v
}

// GetLicenseId returns the LicenseId field value if set, zero value otherwise.
func (o *ApiLicenseLegalMetadataDTO) GetLicenseId() string {
	if o == nil || IsNil(o.LicenseId) {
		var ret string
		return ret
	}
	return *o.LicenseId
}

// GetLicenseIdOk returns a tuple with the LicenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiLicenseLegalMetadataDTO) GetLicenseIdOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseId) {
		return nil, false
	}
	return o.LicenseId, true
}

// HasLicenseId returns a boolean if a field has been set.
func (o *ApiLicenseLegalMetadataDTO) HasLicenseId() bool {
	if o != nil && !IsNil(o.LicenseId) {
		return true
	}

	return false
}

// SetLicenseId gets a reference to the given string and assigns it to the LicenseId field.
func (o *ApiLicenseLegalMetadataDTO) SetLicenseId(v string) {
	o.LicenseId = &v
}

// GetLicenseName returns the LicenseName field value if set, zero value otherwise.
func (o *ApiLicenseLegalMetadataDTO) GetLicenseName() string {
	if o == nil || IsNil(o.LicenseName) {
		var ret string
		return ret
	}
	return *o.LicenseName
}

// GetLicenseNameOk returns a tuple with the LicenseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiLicenseLegalMetadataDTO) GetLicenseNameOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseName) {
		return nil, false
	}
	return o.LicenseName, true
}

// HasLicenseName returns a boolean if a field has been set.
func (o *ApiLicenseLegalMetadataDTO) HasLicenseName() bool {
	if o != nil && !IsNil(o.LicenseName) {
		return true
	}

	return false
}

// SetLicenseName gets a reference to the given string and assigns it to the LicenseName field.
func (o *ApiLicenseLegalMetadataDTO) SetLicenseName(v string) {
	o.LicenseName = &v
}

// GetLicenseText returns the LicenseText field value if set, zero value otherwise.
func (o *ApiLicenseLegalMetadataDTO) GetLicenseText() string {
	if o == nil || IsNil(o.LicenseText) {
		var ret string
		return ret
	}
	return *o.LicenseText
}

// GetLicenseTextOk returns a tuple with the LicenseText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiLicenseLegalMetadataDTO) GetLicenseTextOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseText) {
		return nil, false
	}
	return o.LicenseText, true
}

// HasLicenseText returns a boolean if a field has been set.
func (o *ApiLicenseLegalMetadataDTO) HasLicenseText() bool {
	if o != nil && !IsNil(o.LicenseText) {
		return true
	}

	return false
}

// SetLicenseText gets a reference to the given string and assigns it to the LicenseText field.
func (o *ApiLicenseLegalMetadataDTO) SetLicenseText(v string) {
	o.LicenseText = &v
}

// GetObligations returns the Obligations field value if set, zero value otherwise.
func (o *ApiLicenseLegalMetadataDTO) GetObligations() []LicenseObligationDTO {
	if o == nil || IsNil(o.Obligations) {
		var ret []LicenseObligationDTO
		return ret
	}
	return o.Obligations
}

// GetObligationsOk returns a tuple with the Obligations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiLicenseLegalMetadataDTO) GetObligationsOk() ([]LicenseObligationDTO, bool) {
	if o == nil || IsNil(o.Obligations) {
		return nil, false
	}
	return o.Obligations, true
}

// HasObligations returns a boolean if a field has been set.
func (o *ApiLicenseLegalMetadataDTO) HasObligations() bool {
	if o != nil && !IsNil(o.Obligations) {
		return true
	}

	return false
}

// SetObligations gets a reference to the given []LicenseObligationDTO and assigns it to the Obligations field.
func (o *ApiLicenseLegalMetadataDTO) SetObligations(v []LicenseObligationDTO) {
	o.Obligations = v
}

// GetSingleLicenseIds returns the SingleLicenseIds field value if set, zero value otherwise.
func (o *ApiLicenseLegalMetadataDTO) GetSingleLicenseIds() []string {
	if o == nil || IsNil(o.SingleLicenseIds) {
		var ret []string
		return ret
	}
	return o.SingleLicenseIds
}

// GetSingleLicenseIdsOk returns a tuple with the SingleLicenseIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiLicenseLegalMetadataDTO) GetSingleLicenseIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SingleLicenseIds) {
		return nil, false
	}
	return o.SingleLicenseIds, true
}

// HasSingleLicenseIds returns a boolean if a field has been set.
func (o *ApiLicenseLegalMetadataDTO) HasSingleLicenseIds() bool {
	if o != nil && !IsNil(o.SingleLicenseIds) {
		return true
	}

	return false
}

// SetSingleLicenseIds gets a reference to the given []string and assigns it to the SingleLicenseIds field.
func (o *ApiLicenseLegalMetadataDTO) SetSingleLicenseIds(v []string) {
	o.SingleLicenseIds = v
}

// GetThreatGroup returns the ThreatGroup field value if set, zero value otherwise.
func (o *ApiLicenseLegalMetadataDTO) GetThreatGroup() LicenseThreatGroupDTO {
	if o == nil || IsNil(o.ThreatGroup) {
		var ret LicenseThreatGroupDTO
		return ret
	}
	return *o.ThreatGroup
}

// GetThreatGroupOk returns a tuple with the ThreatGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiLicenseLegalMetadataDTO) GetThreatGroupOk() (*LicenseThreatGroupDTO, bool) {
	if o == nil || IsNil(o.ThreatGroup) {
		return nil, false
	}
	return o.ThreatGroup, true
}

// HasThreatGroup returns a boolean if a field has been set.
func (o *ApiLicenseLegalMetadataDTO) HasThreatGroup() bool {
	if o != nil && !IsNil(o.ThreatGroup) {
		return true
	}

	return false
}

// SetThreatGroup gets a reference to the given LicenseThreatGroupDTO and assigns it to the ThreatGroup field.
func (o *ApiLicenseLegalMetadataDTO) SetThreatGroup(v LicenseThreatGroupDTO) {
	o.ThreatGroup = &v
}

func (o ApiLicenseLegalMetadataDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiLicenseLegalMetadataDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsMulti) {
		toSerialize["isMulti"] = o.IsMulti
	}
	if !IsNil(o.LicenseId) {
		toSerialize["licenseId"] = o.LicenseId
	}
	if !IsNil(o.LicenseName) {
		toSerialize["licenseName"] = o.LicenseName
	}
	if !IsNil(o.LicenseText) {
		toSerialize["licenseText"] = o.LicenseText
	}
	if !IsNil(o.Obligations) {
		toSerialize["obligations"] = o.Obligations
	}
	if !IsNil(o.SingleLicenseIds) {
		toSerialize["singleLicenseIds"] = o.SingleLicenseIds
	}
	if !IsNil(o.ThreatGroup) {
		toSerialize["threatGroup"] = o.ThreatGroup
	}
	return toSerialize, nil
}

type NullableApiLicenseLegalMetadataDTO struct {
	value *ApiLicenseLegalMetadataDTO
	isSet bool
}

func (v NullableApiLicenseLegalMetadataDTO) Get() *ApiLicenseLegalMetadataDTO {
	return v.value
}

func (v *NullableApiLicenseLegalMetadataDTO) Set(val *ApiLicenseLegalMetadataDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableApiLicenseLegalMetadataDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableApiLicenseLegalMetadataDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiLicenseLegalMetadataDTO(val *ApiLicenseLegalMetadataDTO) *NullableApiLicenseLegalMetadataDTO {
	return &NullableApiLicenseLegalMetadataDTO{value: val, isSet: true}
}

func (v NullableApiLicenseLegalMetadataDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiLicenseLegalMetadataDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


