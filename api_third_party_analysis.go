/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.196.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ThirdPartyAnalysisAPIService ThirdPartyAnalysisAPI service
type ThirdPartyAnalysisAPIService service

type ApiGetScanStatusRequest struct {
	ctx context.Context
	ApiService *ThirdPartyAnalysisAPIService
	applicationId string
	scanRequestId string
}

func (r ApiGetScanStatusRequest) Execute() (*ApiThirdPartyScanResultDTO, *http.Response, error) {
	return r.ApiService.GetScanStatusExecute(r)
}

/*
GetScanStatus Method for GetScanStatus

SBOM evaluation is an asynchronous operation. Use this method to check on the status of the SBOM evaluation.

Permissions required: Evaluate Applications

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId Enter the application internal id for the SBOM to be evaluated.
 @param scanRequestId Enter the statusId from the statusUrl generated as a response to the POST request to perform the evaluation.
 @return ApiGetScanStatusRequest
*/
func (a *ThirdPartyAnalysisAPIService) GetScanStatus(ctx context.Context, applicationId string, scanRequestId string) ApiGetScanStatusRequest {
	return ApiGetScanStatusRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		scanRequestId: scanRequestId,
	}
}

// Execute executes the request
//  @return ApiThirdPartyScanResultDTO
func (a *ThirdPartyAnalysisAPIService) GetScanStatusExecute(r ApiGetScanStatusRequest) (*ApiThirdPartyScanResultDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiThirdPartyScanResultDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThirdPartyAnalysisAPIService.GetScanStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/scan/applications/{applicationId}/status/{scanRequestId}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scanRequestId"+"}", url.PathEscape(parameterValueToString(r.scanRequestId, "scanRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScanComponentsRequest struct {
	ctx context.Context
	ApiService *ThirdPartyAnalysisAPIService
	applicationId string
	source string
	stageId *string
	body *string
}

// Enter the stageId to run the evaluation for. The policy actions will be determined by the stage selected. Allowed values are &#x60;develop&#x60;, &#x60;build&#x60;, &#x60;stage-release&#x60;, &#x60;release&#x60; and &#x60;operate&#x60;
func (r ApiScanComponentsRequest) StageId(stageId string) ApiScanComponentsRequest {
	r.stageId = &stageId
	return r
}

// Select the request header content-type from the dropdown, depending on whether the SBOM is in XML or JSON format.  Embed the contents of the SBOM here or enter the file path for the SBOM. A component in the SBOM can be identified by: &lt;ol&gt;&lt;li&gt;packageUrl&lt;/li&gt;&lt;li&gt;Component hash&lt;/li&gt;&lt;li&gt;Component name and version&lt;/li&gt;&lt;/ol&gt;  Any SPE and SWID tags for the component will be preserved in the evaluation report.
func (r ApiScanComponentsRequest) Body(body string) ApiScanComponentsRequest {
	r.body = &body
	return r
}

func (r ApiScanComponentsRequest) Execute() (*ApiThirdPartyScanTicketDTO, *http.Response, error) {
	return r.ApiService.ScanComponentsExecute(r)
}

/*
ScanComponents Method for ScanComponents

Use this method to perform an analysis of an SBOM.

Permissions required: Evaluate Applications

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId Enter the application internal id. Use the Applications REST API to retrieve theapplication internal id.
 @param source Specify the specification name of the SBOM to be evaluated. Allowed values are `cyclonedx` and `spdx`
 @return ApiScanComponentsRequest
*/
func (a *ThirdPartyAnalysisAPIService) ScanComponents(ctx context.Context, applicationId string, source string) ApiScanComponentsRequest {
	return ApiScanComponentsRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		source: source,
	}
}

// Execute executes the request
//  @return ApiThirdPartyScanTicketDTO
func (a *ThirdPartyAnalysisAPIService) ScanComponentsExecute(r ApiScanComponentsRequest) (*ApiThirdPartyScanTicketDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiThirdPartyScanTicketDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThirdPartyAnalysisAPIService.ScanComponents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/scan/applications/{applicationId}/sources/{source}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"source"+"}", url.PathEscape(parameterValueToString(r.source, "source")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.stageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stageId", r.stageId, "form", "")
	} else {
		var defaultValue string = "build"
		r.stageId = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
