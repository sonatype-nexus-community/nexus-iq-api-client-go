/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.184.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the VulnerabilitySource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VulnerabilitySource{}

// VulnerabilitySource struct for VulnerabilitySource
type VulnerabilitySource struct {
	LongName *string `json:"longName,omitempty"`
	ShortName *string `json:"shortName,omitempty"`
}

// NewVulnerabilitySource instantiates a new VulnerabilitySource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerabilitySource() *VulnerabilitySource {
	this := VulnerabilitySource{}
	return &this
}

// NewVulnerabilitySourceWithDefaults instantiates a new VulnerabilitySource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerabilitySourceWithDefaults() *VulnerabilitySource {
	this := VulnerabilitySource{}
	return &this
}

// GetLongName returns the LongName field value if set, zero value otherwise.
func (o *VulnerabilitySource) GetLongName() string {
	if o == nil || IsNil(o.LongName) {
		var ret string
		return ret
	}
	return *o.LongName
}

// GetLongNameOk returns a tuple with the LongName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilitySource) GetLongNameOk() (*string, bool) {
	if o == nil || IsNil(o.LongName) {
		return nil, false
	}
	return o.LongName, true
}

// HasLongName returns a boolean if a field has been set.
func (o *VulnerabilitySource) HasLongName() bool {
	if o != nil && !IsNil(o.LongName) {
		return true
	}

	return false
}

// SetLongName gets a reference to the given string and assigns it to the LongName field.
func (o *VulnerabilitySource) SetLongName(v string) {
	o.LongName = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *VulnerabilitySource) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilitySource) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *VulnerabilitySource) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *VulnerabilitySource) SetShortName(v string) {
	o.ShortName = &v
}

func (o VulnerabilitySource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VulnerabilitySource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LongName) {
		toSerialize["longName"] = o.LongName
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	return toSerialize, nil
}

type NullableVulnerabilitySource struct {
	value *VulnerabilitySource
	isSet bool
}

func (v NullableVulnerabilitySource) Get() *VulnerabilitySource {
	return v.value
}

func (v *NullableVulnerabilitySource) Set(val *VulnerabilitySource) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerabilitySource) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerabilitySource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerabilitySource(val *VulnerabilitySource) *NullableVulnerabilitySource {
	return &NullableVulnerabilitySource{value: val, isSet: true}
}

func (v NullableVulnerabilitySource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerabilitySource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


