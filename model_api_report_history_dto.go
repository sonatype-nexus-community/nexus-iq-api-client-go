/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.195.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the ApiReportHistoryDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiReportHistoryDTO{}

// ApiReportHistoryDTO struct for ApiReportHistoryDTO
type ApiReportHistoryDTO struct {
	ApplicationId *string `json:"applicationId,omitempty"`
	Reports []ApiReportResultsDTO `json:"reports,omitempty"`
}

// NewApiReportHistoryDTO instantiates a new ApiReportHistoryDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiReportHistoryDTO() *ApiReportHistoryDTO {
	this := ApiReportHistoryDTO{}
	return &this
}

// NewApiReportHistoryDTOWithDefaults instantiates a new ApiReportHistoryDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiReportHistoryDTOWithDefaults() *ApiReportHistoryDTO {
	this := ApiReportHistoryDTO{}
	return &this
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *ApiReportHistoryDTO) GetApplicationId() string {
	if o == nil || IsNil(o.ApplicationId) {
		var ret string
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReportHistoryDTO) GetApplicationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationId) {
		return nil, false
	}
	return o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *ApiReportHistoryDTO) HasApplicationId() bool {
	if o != nil && !IsNil(o.ApplicationId) {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given string and assigns it to the ApplicationId field.
func (o *ApiReportHistoryDTO) SetApplicationId(v string) {
	o.ApplicationId = &v
}

// GetReports returns the Reports field value if set, zero value otherwise.
func (o *ApiReportHistoryDTO) GetReports() []ApiReportResultsDTO {
	if o == nil || IsNil(o.Reports) {
		var ret []ApiReportResultsDTO
		return ret
	}
	return o.Reports
}

// GetReportsOk returns a tuple with the Reports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReportHistoryDTO) GetReportsOk() ([]ApiReportResultsDTO, bool) {
	if o == nil || IsNil(o.Reports) {
		return nil, false
	}
	return o.Reports, true
}

// HasReports returns a boolean if a field has been set.
func (o *ApiReportHistoryDTO) HasReports() bool {
	if o != nil && !IsNil(o.Reports) {
		return true
	}

	return false
}

// SetReports gets a reference to the given []ApiReportResultsDTO and assigns it to the Reports field.
func (o *ApiReportHistoryDTO) SetReports(v []ApiReportResultsDTO) {
	o.Reports = v
}

func (o ApiReportHistoryDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiReportHistoryDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationId) {
		toSerialize["applicationId"] = o.ApplicationId
	}
	if !IsNil(o.Reports) {
		toSerialize["reports"] = o.Reports
	}
	return toSerialize, nil
}

type NullableApiReportHistoryDTO struct {
	value *ApiReportHistoryDTO
	isSet bool
}

func (v NullableApiReportHistoryDTO) Get() *ApiReportHistoryDTO {
	return v.value
}

func (v *NullableApiReportHistoryDTO) Set(val *ApiReportHistoryDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableApiReportHistoryDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableApiReportHistoryDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiReportHistoryDTO(val *ApiReportHistoryDTO) *NullableApiReportHistoryDTO {
	return &NullableApiReportHistoryDTO{value: val, isSet: true}
}

func (v NullableApiReportHistoryDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiReportHistoryDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


