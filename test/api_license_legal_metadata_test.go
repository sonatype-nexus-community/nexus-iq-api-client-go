/*
Sonatype Lifecycle Public REST API

Testing LicenseLegalMetadataAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sonatypeiq

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	sonatypeiq "github.com/sonatype-nexus-community/nexus-iq-api-client-go"
)

func Test_sonatypeiq_LicenseLegalMetadataAPIService(t *testing.T) {

	configuration := sonatypeiq.NewConfiguration()
	apiClient := sonatypeiq.NewAPIClient(configuration)

	t.Run("Test LicenseLegalMetadataAPIService GetLicenseLegalApplicationHTMLReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var stageId string

		httpRes, err := apiClient.LicenseLegalMetadataAPI.GetLicenseLegalApplicationHTMLReport(context.Background(), applicationId, stageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicenseLegalMetadataAPIService GetLicenseLegalApplicationReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.LicenseLegalMetadataAPI.GetLicenseLegalApplicationReport(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicenseLegalMetadataAPIService GetLicenseLegalApplicationReport1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var stageId string

		resp, httpRes, err := apiClient.LicenseLegalMetadataAPI.GetLicenseLegalApplicationReport1(context.Background(), applicationId, stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicenseLegalMetadataAPIService GetLicenseLegalComponentReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerType string
		var ownerId string

		resp, httpRes, err := apiClient.LicenseLegalMetadataAPI.GetLicenseLegalComponentReport(context.Background(), ownerType, ownerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicenseLegalMetadataAPIService GetLicenseLegalCustomApplicationHTMLReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var stageId string

		httpRes, err := apiClient.LicenseLegalMetadataAPI.GetLicenseLegalCustomApplicationHTMLReport(context.Background(), applicationId, stageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicenseLegalMetadataAPIService GetLicenseLegalCustomApplicationHTMLReport1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var stageId string
		var templateId string

		httpRes, err := apiClient.LicenseLegalMetadataAPI.GetLicenseLegalCustomApplicationHTMLReport1(context.Background(), applicationId, stageId, templateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicenseLegalMetadataAPIService GetLicenseLegalCustomMultiApplicationHTMLReport1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		httpRes, err := apiClient.LicenseLegalMetadataAPI.GetLicenseLegalCustomMultiApplicationHTMLReport1(context.Background(), templateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicenseLegalMetadataAPIService GetLicenseLegalMultiApplicationHTMLReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.LicenseLegalMetadataAPI.GetLicenseLegalMultiApplicationHTMLReport(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicenseLegalMetadataAPIService GetLicenseLegalMultiApplicationReportFromActiveUserFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		httpRes, err := apiClient.LicenseLegalMetadataAPI.GetLicenseLegalMultiApplicationReportFromActiveUserFilter(context.Background(), templateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
