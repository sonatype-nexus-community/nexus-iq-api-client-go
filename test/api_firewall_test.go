/*
Sonatype Lifecycle Public REST API

Testing FirewallAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sonatypeiq

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	sonatypeiq "github.com/sonatype-nexus-community/nexus-iq-api-client-go"
)

func Test_sonatypeiq_FirewallAPIService(t *testing.T) {

	configuration := sonatypeiq.NewConfiguration()
	apiClient := sonatypeiq.NewAPIClient(configuration)

	t.Run("Test FirewallAPIService AddProprietaryComponentNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var format string

		httpRes, err := apiClient.FirewallAPI.AddProprietaryComponentNames(context.Background(), format).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService AddRepositoryManager", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirewallAPI.AddRepositoryManager(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService ConfigureRepositories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryManagerId string

		httpRes, err := apiClient.FirewallAPI.ConfigureRepositories(context.Background(), repositoryManagerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService DeleteRepositoryManager", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryManagerId string

		httpRes, err := apiClient.FirewallAPI.DeleteRepositoryManager(context.Background(), repositoryManagerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService EvaluateComponents1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryManagerId string
		var repositoryId string

		resp, httpRes, err := apiClient.FirewallAPI.EvaluateComponents1(context.Background(), repositoryManagerId, repositoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService EvaluateMalware", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirewallAPI.EvaluateMalware(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetConfiguredRepositories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryManagerId string

		resp, httpRes, err := apiClient.FirewallAPI.GetConfiguredRepositories(context.Background(), repositoryManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetFirewallAutoUnquarantineConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirewallAPI.GetFirewallAutoUnquarantineConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetFirewallMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.FirewallAPI.GetFirewallMetrics(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetFirewallUnquarantineSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirewallAPI.GetFirewallUnquarantineSummary(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetMalwareDefenseMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirewallAPI.GetMalwareDefenseMetrics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetQuarantineList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.FirewallAPI.GetQuarantineList(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetQuarantineSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirewallAPI.GetQuarantineSummary(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetQuarantinedComponentViewAnonymousAccess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.FirewallAPI.GetQuarantinedComponentViewAnonymousAccess(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetRepositoryContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirewallAPI.GetRepositoryContainer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetRepositoryManager", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryManagerId string

		resp, httpRes, err := apiClient.FirewallAPI.GetRepositoryManager(context.Background(), repositoryManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetRepositoryManagers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirewallAPI.GetRepositoryManagers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetRoiFirewallMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var currencyType string

		resp, httpRes, err := apiClient.FirewallAPI.GetRoiFirewallMetrics(context.Background(), currencyType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService GetUnquarantineList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.FirewallAPI.GetUnquarantineList(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService RemoveProprietaryComponentNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var format string

		httpRes, err := apiClient.FirewallAPI.RemoveProprietaryComponentNames(context.Background(), format).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService SetFirewallAutoUnquarantineConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirewallAPI.SetFirewallAutoUnquarantineConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirewallAPIService SetQuarantinedComponentViewAnonymousAccess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var enabled bool

		httpRes, err := apiClient.FirewallAPI.SetQuarantinedComponentViewAnonymousAccess(context.Background(), enabled).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
