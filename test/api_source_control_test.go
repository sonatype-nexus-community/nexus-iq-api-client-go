/*
Sonatype Lifecycle Public REST API

Testing SourceControlAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sonatypeiq

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	sonatypeiq "github.com/sonatype-nexus-community/nexus-iq-api-client-go"
)

func Test_sonatypeiq_SourceControlAPIService(t *testing.T) {

	configuration := sonatypeiq.NewConfiguration()
	apiClient := sonatypeiq.NewAPIClient(configuration)

	t.Run("Test SourceControlAPIService AddSourceControl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerType string
		var internalOwnerId string

		resp, httpRes, err := apiClient.SourceControlAPI.AddSourceControl(context.Background(), ownerType, internalOwnerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SourceControlAPIService AddUserMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		httpRes, err := apiClient.SourceControlAPI.AddUserMappings(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SourceControlAPIService AutomaticRoleAssignment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var publicId string

		resp, httpRes, err := apiClient.SourceControlAPI.AutomaticRoleAssignment(context.Background(), publicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SourceControlAPIService DeleteSourceControl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerType string
		var internalOwnerId string

		httpRes, err := apiClient.SourceControlAPI.DeleteSourceControl(context.Background(), ownerType, internalOwnerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SourceControlAPIService DeleteUserMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		httpRes, err := apiClient.SourceControlAPI.DeleteUserMappings(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SourceControlAPIService GetSourceControl1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerType string
		var internalOwnerId string

		resp, httpRes, err := apiClient.SourceControlAPI.GetSourceControl1(context.Background(), ownerType, internalOwnerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SourceControlAPIService GetUserMappingsByOwner", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerType string
		var internalOwnerId string

		resp, httpRes, err := apiClient.SourceControlAPI.GetUserMappingsByOwner(context.Background(), ownerType, internalOwnerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SourceControlAPIService UpdateSourceControl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerType string
		var internalOwnerId string

		resp, httpRes, err := apiClient.SourceControlAPI.UpdateSourceControl(context.Background(), ownerType, internalOwnerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
