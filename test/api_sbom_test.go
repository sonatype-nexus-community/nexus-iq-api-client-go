/*
Sonatype Lifecycle Public REST API

Testing SBOMAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sonatypeiq

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	sonatypeiq "github.com/sonatype-nexus-community/nexus-iq-api-client-go"
)

func Test_sonatypeiq_SBOMAPIService(t *testing.T) {

	configuration := sonatypeiq.NewConfiguration()
	apiClient := sonatypeiq.NewAPIClient(configuration)

	t.Run("Test SBOMAPIService DeleteSbomVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var version string

		httpRes, err := apiClient.SBOMAPI.DeleteSbomVersion(context.Background(), applicationId, version).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SBOMAPIService DeleteVulnerabilityAnalysis", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var version string
		var refId string

		httpRes, err := apiClient.SBOMAPI.DeleteVulnerabilityAnalysis(context.Background(), applicationId, version, refId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SBOMAPIService GetActiveSbomVersionListByApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		httpRes, err := apiClient.SBOMAPI.GetActiveSbomVersionListByApplication(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SBOMAPIService GetImportStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var importRequestId string

		httpRes, err := apiClient.SBOMAPI.GetImportStatus(context.Background(), applicationId, importRequestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SBOMAPIService GetSbomComponents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var version string

		httpRes, err := apiClient.SBOMAPI.GetSbomComponents(context.Background(), applicationId, version).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SBOMAPIService GetSbomMetadataSummaryForApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		httpRes, err := apiClient.SBOMAPI.GetSbomMetadataSummaryForApplication(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SBOMAPIService GetSbomVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var version string

		httpRes, err := apiClient.SBOMAPI.GetSbomVersion(context.Background(), applicationId, version).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SBOMAPIService ImportSbom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SBOMAPI.ImportSbom(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SBOMAPIService SaveVulnerabilityAnalysis", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var version string
		var refId string

		httpRes, err := apiClient.SBOMAPI.SaveVulnerabilityAnalysis(context.Background(), applicationId, version, refId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
