/*
Sonatype Lifecycle Public REST API

Testing ComponentLabelsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sonatypeiq

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	sonatypeiq "github.com/sonatype-nexus-community/nexus-iq-api-client-go"
)

func Test_sonatypeiq_ComponentLabelsAPIService(t *testing.T) {

	configuration := sonatypeiq.NewConfiguration()
	apiClient := sonatypeiq.NewAPIClient(configuration)

	t.Run("Test ComponentLabelsAPIService AddLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerType string
		var ownerId string

		resp, httpRes, err := apiClient.ComponentLabelsAPI.AddLabel(context.Background(), ownerType, ownerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComponentLabelsAPIService DeleteLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerType string
		var ownerId string
		var labelId string

		httpRes, err := apiClient.ComponentLabelsAPI.DeleteLabel(context.Background(), ownerType, ownerId, labelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComponentLabelsAPIService GetApplicableContexts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerType string
		var ownerId string
		var labelId string

		resp, httpRes, err := apiClient.ComponentLabelsAPI.GetApplicableContexts(context.Background(), ownerType, ownerId, labelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComponentLabelsAPIService GetApplicableLabels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerType string
		var ownerId string

		resp, httpRes, err := apiClient.ComponentLabelsAPI.GetApplicableLabels(context.Background(), ownerType, ownerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComponentLabelsAPIService GetLabels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerType string
		var ownerId string

		resp, httpRes, err := apiClient.ComponentLabelsAPI.GetLabels(context.Background(), ownerType, ownerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ComponentLabelsAPIService UpdateLabel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerType string
		var ownerId string

		resp, httpRes, err := apiClient.ComponentLabelsAPI.UpdateLabel(context.Background(), ownerType, ownerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
