/*
Sonatype Lifecycle Public REST API

Testing ApplicationReportDataAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sonatypeiq

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	sonatypeiq "github.com/sonatype-nexus-community/nexus-iq-api-client-go"
)

func Test_sonatypeiq_ApplicationReportDataAPIService(t *testing.T) {

	configuration := sonatypeiq.NewConfiguration()
	apiClient := sonatypeiq.NewAPIClient(configuration)

	t.Run("Test ApplicationReportDataAPIService GetData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationPublicId string
		var scanId string

		httpRes, err := apiClient.ApplicationReportDataAPI.GetData(context.Background(), applicationPublicId, scanId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationReportDataAPIService GetDependencyTree", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationPublicId string
		var scanId string

		resp, httpRes, err := apiClient.ApplicationReportDataAPI.GetDependencyTree(context.Background(), applicationPublicId, scanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationReportDataAPIService GetPolicyViolationDiff", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationPublicId string

		resp, httpRes, err := apiClient.ApplicationReportDataAPI.GetPolicyViolationDiff(context.Background(), applicationPublicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationReportDataAPIService GetPolicyViolations1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationPublicId string
		var scanId string

		resp, httpRes, err := apiClient.ApplicationReportDataAPI.GetPolicyViolations1(context.Background(), applicationPublicId, scanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationReportDataAPIService GetRawData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationPublicId string
		var scanId string

		resp, httpRes, err := apiClient.ApplicationReportDataAPI.GetRawData(context.Background(), applicationPublicId, scanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
