/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.195.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// LicenseLegalMetadataReportAPIService LicenseLegalMetadataReportAPI service
type LicenseLegalMetadataReportAPIService service

type ApiGetLicenseLegalApplicationHTMLReportRequest struct {
	ctx context.Context
	ApiService *LicenseLegalMetadataReportAPIService
	applicationId string
	stageId string
}

func (r ApiGetLicenseLegalApplicationHTMLReportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLicenseLegalApplicationHTMLReportExecute(r)
}

/*
GetLicenseLegalApplicationHTMLReport Method for GetLicenseLegalApplicationHTMLReport

Use this method to retrieve the license legal data for components in an application at a specific stage, in HTML format.

Permissions required: Review Legal Obligations For Components Licenses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId Enter the application id or public id.
 @param stageId Enter the stageId.
 @return ApiGetLicenseLegalApplicationHTMLReportRequest
*/
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalApplicationHTMLReport(ctx context.Context, applicationId string, stageId string) ApiGetLicenseLegalApplicationHTMLReportRequest {
	return ApiGetLicenseLegalApplicationHTMLReportRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		stageId: stageId,
	}
}

// Execute executes the request
//  @return string
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalApplicationHTMLReportExecute(r ApiGetLicenseLegalApplicationHTMLReportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseLegalMetadataReportAPIService.GetLicenseLegalApplicationHTMLReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}/report"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"stageId"+"}", url.PathEscape(parameterValueToString(r.stageId, "stageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLicenseLegalApplicationReportRequest struct {
	ctx context.Context
	ApiService *LicenseLegalMetadataReportAPIService
	applicationId string
}

func (r ApiGetLicenseLegalApplicationReportRequest) Execute() (*ApiLicenseLegalApplicationReportDTO, *http.Response, error) {
	return r.ApiService.GetLicenseLegalApplicationReportExecute(r)
}

/*
GetLicenseLegalApplicationReport Method for GetLicenseLegalApplicationReport

Use this REST API to retrieve the raw license legal data for components in an application.

Permissions required: Review Legal Obligations For Components Licenses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId Enter the application id or public id.
 @return ApiGetLicenseLegalApplicationReportRequest
*/
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalApplicationReport(ctx context.Context, applicationId string) ApiGetLicenseLegalApplicationReportRequest {
	return ApiGetLicenseLegalApplicationReportRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
	}
}

// Execute executes the request
//  @return ApiLicenseLegalApplicationReportDTO
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalApplicationReportExecute(r ApiGetLicenseLegalApplicationReportRequest) (*ApiLicenseLegalApplicationReportDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiLicenseLegalApplicationReportDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseLegalMetadataReportAPIService.GetLicenseLegalApplicationReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseLegalMetadata/application/{applicationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLicenseLegalApplicationReport1Request struct {
	ctx context.Context
	ApiService *LicenseLegalMetadataReportAPIService
	applicationId string
	stageId string
}

func (r ApiGetLicenseLegalApplicationReport1Request) Execute() (*ApiLicenseLegalApplicationReportDTO, *http.Response, error) {
	return r.ApiService.GetLicenseLegalApplicationReport1Execute(r)
}

/*
GetLicenseLegalApplicationReport1 Method for GetLicenseLegalApplicationReport1

Use this method to retrieve the raw license legal data for components in an application based on the application scan at a specific stage.

Permissions required: Review Legal Obligations For Components Licenses 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId Enter the application id or public id.
 @param stageId Enter the stageId.
 @return ApiGetLicenseLegalApplicationReport1Request
*/
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalApplicationReport1(ctx context.Context, applicationId string, stageId string) ApiGetLicenseLegalApplicationReport1Request {
	return ApiGetLicenseLegalApplicationReport1Request{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		stageId: stageId,
	}
}

// Execute executes the request
//  @return ApiLicenseLegalApplicationReportDTO
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalApplicationReport1Execute(r ApiGetLicenseLegalApplicationReport1Request) (*ApiLicenseLegalApplicationReportDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiLicenseLegalApplicationReportDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseLegalMetadataReportAPIService.GetLicenseLegalApplicationReport1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"stageId"+"}", url.PathEscape(parameterValueToString(r.stageId, "stageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLicenseLegalComponentReportRequest struct {
	ctx context.Context
	ApiService *LicenseLegalMetadataReportAPIService
	ownerType string
	ownerId string
	componentIdentifier *ComponentIdentifier
	packageUrl *string
	hash *string
	identificationSource *string
	scanId *string
}

// Enter the componentIdentifier consisting of format and coordinates.
func (r ApiGetLicenseLegalComponentReportRequest) ComponentIdentifier(componentIdentifier ComponentIdentifier) ApiGetLicenseLegalComponentReportRequest {
	r.componentIdentifier = &componentIdentifier
	return r
}

// Enter the package URL.
func (r ApiGetLicenseLegalComponentReportRequest) PackageUrl(packageUrl string) ApiGetLicenseLegalComponentReportRequest {
	r.packageUrl = &packageUrl
	return r
}

// Enter the component hash.
func (r ApiGetLicenseLegalComponentReportRequest) Hash(hash string) ApiGetLicenseLegalComponentReportRequest {
	r.hash = &hash
	return r
}

// Enter the identification source if a third party scan is used.
func (r ApiGetLicenseLegalComponentReportRequest) IdentificationSource(identificationSource string) ApiGetLicenseLegalComponentReportRequest {
	r.identificationSource = &identificationSource
	return r
}

// Enter the scanId for the report where the component was identified (required if identified by third party scan).
func (r ApiGetLicenseLegalComponentReportRequest) ScanId(scanId string) ApiGetLicenseLegalComponentReportRequest {
	r.scanId = &scanId
	return r
}

func (r ApiGetLicenseLegalComponentReportRequest) Execute() (*ApiLicenseLegalComponentReportDTO, *http.Response, error) {
	return r.ApiService.GetLicenseLegalComponentReportExecute(r)
}

/*
GetLicenseLegalComponentReport Method for GetLicenseLegalComponentReport

Use this method to retrieve the raw license legal data for a component by specifying the component identifier or package URL or the component hash.

Permissions required: Review Legal Obligations For Components Licenses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the ownerType
 @param ownerId Enter the ownerId corresponding to the ownerType.
 @return ApiGetLicenseLegalComponentReportRequest
*/
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalComponentReport(ctx context.Context, ownerType string, ownerId string) ApiGetLicenseLegalComponentReportRequest {
	return ApiGetLicenseLegalComponentReportRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
	}
}

// Execute executes the request
//  @return ApiLicenseLegalComponentReportDTO
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalComponentReportExecute(r ApiGetLicenseLegalComponentReportRequest) (*ApiLicenseLegalComponentReportDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiLicenseLegalComponentReportDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseLegalMetadataReportAPIService.GetLicenseLegalComponentReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseLegalMetadata/{ownerType}/{ownerId}/component"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.componentIdentifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "componentIdentifier", r.componentIdentifier, "form", "")
	}
	if r.packageUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "packageUrl", r.packageUrl, "form", "")
	}
	if r.hash != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hash", r.hash, "form", "")
	}
	if r.identificationSource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identificationSource", r.identificationSource, "form", "")
	}
	if r.scanId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scanId", r.scanId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLicenseLegalCustomApplicationHTMLReportRequest struct {
	ctx context.Context
	ApiService *LicenseLegalMetadataReportAPIService
	applicationId string
	stageId string
}

func (r ApiGetLicenseLegalCustomApplicationHTMLReportRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLicenseLegalCustomApplicationHTMLReportExecute(r)
}

/*
GetLicenseLegalCustomApplicationHTMLReport Method for GetLicenseLegalCustomApplicationHTMLReport

Use this method to retrieve and customize the license legal data for components in an application at a specific stage, in HTML format.

Permissions required: Review Legal Obligations For Components Licenses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId Enter the application id or public id.
 @param stageId Enter the stageId.
 @return ApiGetLicenseLegalCustomApplicationHTMLReportRequest
*/
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalCustomApplicationHTMLReport(ctx context.Context, applicationId string, stageId string) ApiGetLicenseLegalCustomApplicationHTMLReportRequest {
	return ApiGetLicenseLegalCustomApplicationHTMLReportRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		stageId: stageId,
	}
}

// Execute executes the request
//  @return string
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalCustomApplicationHTMLReportExecute(r ApiGetLicenseLegalCustomApplicationHTMLReportRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseLegalMetadataReportAPIService.GetLicenseLegalCustomApplicationHTMLReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}/report"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"stageId"+"}", url.PathEscape(parameterValueToString(r.stageId, "stageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLicenseLegalCustomApplicationHTMLReport1Request struct {
	ctx context.Context
	ApiService *LicenseLegalMetadataReportAPIService
	applicationId string
	stageId string
	templateId string
}

func (r ApiGetLicenseLegalCustomApplicationHTMLReport1Request) Execute() (*http.Response, error) {
	return r.ApiService.GetLicenseLegalCustomApplicationHTMLReport1Execute(r)
}

/*
GetLicenseLegalCustomApplicationHTMLReport1 Method for GetLicenseLegalCustomApplicationHTMLReport1

Use this method to generate a license legal report in the specified HTML template format.

Permissions required: Review Legal Obligations For Components Licenses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId Enter the application id or public id.
 @param stageId Enter the stageId.
 @param templateId Enter the templateId for the HTML report format.
 @return ApiGetLicenseLegalCustomApplicationHTMLReport1Request
*/
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalCustomApplicationHTMLReport1(ctx context.Context, applicationId string, stageId string, templateId string) ApiGetLicenseLegalCustomApplicationHTMLReport1Request {
	return ApiGetLicenseLegalCustomApplicationHTMLReport1Request{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		stageId: stageId,
		templateId: templateId,
	}
}

// Execute executes the request
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalCustomApplicationHTMLReport1Execute(r ApiGetLicenseLegalCustomApplicationHTMLReport1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseLegalMetadataReportAPIService.GetLicenseLegalCustomApplicationHTMLReport1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}/report/templateId/{templateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"stageId"+"}", url.PathEscape(parameterValueToString(r.stageId, "stageId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateId"+"}", url.PathEscape(parameterValueToString(r.templateId, "templateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLicenseLegalCustomMultiApplicationHTMLReport1Request struct {
	ctx context.Context
	ApiService *LicenseLegalMetadataReportAPIService
	templateId string
}

func (r ApiGetLicenseLegalCustomMultiApplicationHTMLReport1Request) Execute() (*http.Response, error) {
	return r.ApiService.GetLicenseLegalCustomMultiApplicationHTMLReport1Execute(r)
}

/*
GetLicenseLegalCustomMultiApplicationHTMLReport1 Method for GetLicenseLegalCustomMultiApplicationHTMLReport1

Use this method to generate license legal data for all applications in HTML format based on the given template.

Permissions required: Review Legal Obligations For Components Licenses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param templateId Enter the `templateId` for the HTML report.
 @return ApiGetLicenseLegalCustomMultiApplicationHTMLReport1Request
*/
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalCustomMultiApplicationHTMLReport1(ctx context.Context, templateId string) ApiGetLicenseLegalCustomMultiApplicationHTMLReport1Request {
	return ApiGetLicenseLegalCustomMultiApplicationHTMLReport1Request{
		ApiService: a,
		ctx: ctx,
		templateId: templateId,
	}
}

// Execute executes the request
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalCustomMultiApplicationHTMLReport1Execute(r ApiGetLicenseLegalCustomMultiApplicationHTMLReport1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseLegalMetadataReportAPIService.GetLicenseLegalCustomMultiApplicationHTMLReport1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseLegalMetadata/multiApplication/report/templateId/{templateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"templateId"+"}", url.PathEscape(parameterValueToString(r.templateId, "templateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLicenseLegalMultiApplicationHTMLReportRequest struct {
	ctx context.Context
	ApiService *LicenseLegalMetadataReportAPIService
}

func (r ApiGetLicenseLegalMultiApplicationHTMLReportRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetLicenseLegalMultiApplicationHTMLReportExecute(r)
}

/*
GetLicenseLegalMultiApplicationHTMLReport Method for GetLicenseLegalMultiApplicationHTMLReport

Use this method to generate license legal data in HTML format.

Permissions required: Review Legal Obligations For Components Licenses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLicenseLegalMultiApplicationHTMLReportRequest
*/
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalMultiApplicationHTMLReport(ctx context.Context) ApiGetLicenseLegalMultiApplicationHTMLReportRequest {
	return ApiGetLicenseLegalMultiApplicationHTMLReportRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalMultiApplicationHTMLReportExecute(r ApiGetLicenseLegalMultiApplicationHTMLReportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseLegalMetadataReportAPIService.GetLicenseLegalMultiApplicationHTMLReport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseLegalMetadata/multiApplication/report"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLicenseLegalMultiApplicationReportFromActiveUserFilterRequest struct {
	ctx context.Context
	ApiService *LicenseLegalMetadataReportAPIService
	templateId string
}

func (r ApiGetLicenseLegalMultiApplicationReportFromActiveUserFilterRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetLicenseLegalMultiApplicationReportFromActiveUserFilterExecute(r)
}

/*
GetLicenseLegalMultiApplicationReportFromActiveUserFilter Method for GetLicenseLegalMultiApplicationReportFromActiveUserFilter

Use this method to generate license legal data in HTML format for applications ,on which the logged in user has permissions.

Permission required: Review Legal Obligations For Components Licenses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param templateId Enter the templateId for the license legal data.
 @return ApiGetLicenseLegalMultiApplicationReportFromActiveUserFilterRequest
*/
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalMultiApplicationReportFromActiveUserFilter(ctx context.Context, templateId string) ApiGetLicenseLegalMultiApplicationReportFromActiveUserFilterRequest {
	return ApiGetLicenseLegalMultiApplicationReportFromActiveUserFilterRequest{
		ApiService: a,
		ctx: ctx,
		templateId: templateId,
	}
}

// Execute executes the request
//  @return string
func (a *LicenseLegalMetadataReportAPIService) GetLicenseLegalMultiApplicationReportFromActiveUserFilterExecute(r ApiGetLicenseLegalMultiApplicationReportFromActiveUserFilterRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseLegalMetadataReportAPIService.GetLicenseLegalMultiApplicationReportFromActiveUserFilter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseLegalMetadata/multiApplication/activeUserFilter/report/templateId/{templateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"templateId"+"}", url.PathEscape(parameterValueToString(r.templateId, "templateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
