/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.192.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the SCMUserMappingsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SCMUserMappingsDTO{}

// SCMUserMappingsDTO struct for SCMUserMappingsDTO
type SCMUserMappingsDTO struct {
	Mappings []UserMapping `json:"mappings,omitempty"`
	Role *string `json:"role,omitempty"`
}

// NewSCMUserMappingsDTO instantiates a new SCMUserMappingsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSCMUserMappingsDTO() *SCMUserMappingsDTO {
	this := SCMUserMappingsDTO{}
	return &this
}

// NewSCMUserMappingsDTOWithDefaults instantiates a new SCMUserMappingsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSCMUserMappingsDTOWithDefaults() *SCMUserMappingsDTO {
	this := SCMUserMappingsDTO{}
	return &this
}

// GetMappings returns the Mappings field value if set, zero value otherwise.
func (o *SCMUserMappingsDTO) GetMappings() []UserMapping {
	if o == nil || IsNil(o.Mappings) {
		var ret []UserMapping
		return ret
	}
	return o.Mappings
}

// GetMappingsOk returns a tuple with the Mappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCMUserMappingsDTO) GetMappingsOk() ([]UserMapping, bool) {
	if o == nil || IsNil(o.Mappings) {
		return nil, false
	}
	return o.Mappings, true
}

// HasMappings returns a boolean if a field has been set.
func (o *SCMUserMappingsDTO) HasMappings() bool {
	if o != nil && !IsNil(o.Mappings) {
		return true
	}

	return false
}

// SetMappings gets a reference to the given []UserMapping and assigns it to the Mappings field.
func (o *SCMUserMappingsDTO) SetMappings(v []UserMapping) {
	o.Mappings = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *SCMUserMappingsDTO) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCMUserMappingsDTO) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *SCMUserMappingsDTO) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *SCMUserMappingsDTO) SetRole(v string) {
	o.Role = &v
}

func (o SCMUserMappingsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SCMUserMappingsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mappings) {
		toSerialize["mappings"] = o.Mappings
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return toSerialize, nil
}

type NullableSCMUserMappingsDTO struct {
	value *SCMUserMappingsDTO
	isSet bool
}

func (v NullableSCMUserMappingsDTO) Get() *SCMUserMappingsDTO {
	return v.value
}

func (v *NullableSCMUserMappingsDTO) Set(val *SCMUserMappingsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSCMUserMappingsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSCMUserMappingsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSCMUserMappingsDTO(val *SCMUserMappingsDTO) *NullableSCMUserMappingsDTO {
	return &NullableSCMUserMappingsDTO{value: val, isSet: true}
}

func (v NullableSCMUserMappingsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSCMUserMappingsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


