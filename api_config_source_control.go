/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.192.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ConfigSourceControlAPIService ConfigSourceControlAPI service
type ConfigSourceControlAPIService service

type ApiDeleteConfiguration5Request struct {
	ctx context.Context
	ApiService *ConfigSourceControlAPIService
}

func (r ApiDeleteConfiguration5Request) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConfiguration5Execute(r)
}

/*
DeleteConfiguration5 Method for DeleteConfiguration5

Use this method to delete an existing SCM configuration.

Permissions required: Edit System Configuration and Users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteConfiguration5Request
*/
func (a *ConfigSourceControlAPIService) DeleteConfiguration5(ctx context.Context) ApiDeleteConfiguration5Request {
	return ApiDeleteConfiguration5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ConfigSourceControlAPIService) DeleteConfiguration5Execute(r ApiDeleteConfiguration5Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigSourceControlAPIService.DeleteConfiguration5")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/sourceControl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetConfiguration5Request struct {
	ctx context.Context
	ApiService *ConfigSourceControlAPIService
}

func (r ApiGetConfiguration5Request) Execute() (*ApiSourceControlConfigurationDTO, *http.Response, error) {
	return r.ApiService.GetConfiguration5Execute(r)
}

/*
GetConfiguration5 Method for GetConfiguration5

Use this method to retrieve an existing SCM configuration.

Permissions required: Edit System Configuration and Users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetConfiguration5Request
*/
func (a *ConfigSourceControlAPIService) GetConfiguration5(ctx context.Context) ApiGetConfiguration5Request {
	return ApiGetConfiguration5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiSourceControlConfigurationDTO
func (a *ConfigSourceControlAPIService) GetConfiguration5Execute(r ApiGetConfiguration5Request) (*ApiSourceControlConfigurationDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiSourceControlConfigurationDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigSourceControlAPIService.GetConfiguration5")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/sourceControl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetConfiguration5Request struct {
	ctx context.Context
	ApiService *ConfigSourceControlAPIService
	apiSourceControlConfigurationDTO *ApiSourceControlConfigurationDTO
}

// Provide the settings for the SCM configuration as below: &lt;ul&gt;&lt;li&gt;&#x60;cloneDirectory&#x60; is the location of the cloned repository that will be used by the IQ server. If a relative path is provided, then that path will be created inside the  &#x60;sonatype-work&#x60; directory and your repository will be created within this. A return value &#x60;source-control&#x60; indicates that this setting is not configured.&lt;/li&gt;&lt;li&gt;&#x60;gitImplementation&#x60; will have the value &#x60;java&#x60; for JGit or &#x60;native&#x60; for a native git client.&lt;/li&gt;&lt;li&gt;&#x60;prCommentPurgeWindow&#x60; is the number of days until the comments of a Pull Request (PR) are allowed to be purged.&lt;/li&gt;&lt;li&gt;&#x60;prEventPurgeWindow&#x60; is the number of days until PR events are allowed to be purged.&lt;/li&gt;&lt;li&gt;&#x60;gitExecutable&#x60; is the absolute path to a native client. No value indicates the native git client is on the system path.&lt;/li&gt;&#x60;gitTimeoutSeconds&#x60; is the number of seconds a git command can execute before timing out.&lt;/li&gt;&#x60;commitUsername&#x60; is the username that will be used for the SCM features. The value &#x60;NexusIQ&#x60; indicates the default value.&lt;/li&gt;&#x60;commitEmail&#x60; is the commit email that will be used for the SCM features.&#x60;useUsernameInRepositoryCloneUrl&#x60; indicates if the username will be added to the URL for the clonedrepository. This can be used in conjunction with &#x60;commitEmail&#x60; to support the &#39;Verified Committer&#39; feature of Bitbucket.&lt;/li&gt;&#x60;defaultBranchMonitoringStartTime&#x60; has a default value between 00:00 and 00:10. It is the time at which the default branch monitoring will start for the first time.&lt;/li&gt;&#x60;defaultBranchMonitoringIntervalHours&#x60; is the number of hours elapsed between the executions of default branch monitoring by the IQ Server. The default value is 24 hours.&lt;/li&gt;&lt;li&gt;&#x60;pullRequestMonitoringIntervalSeconds&#x60; is the time in seconds between consecutive execution of PR monitoring. The default value is 60 seconds.&lt;/li&gt;&lt;/ul&gt;
func (r ApiSetConfiguration5Request) ApiSourceControlConfigurationDTO(apiSourceControlConfigurationDTO ApiSourceControlConfigurationDTO) ApiSetConfiguration5Request {
	r.apiSourceControlConfigurationDTO = &apiSourceControlConfigurationDTO
	return r
}

func (r ApiSetConfiguration5Request) Execute() (*http.Response, error) {
	return r.ApiService.SetConfiguration5Execute(r)
}

/*
SetConfiguration5 Method for SetConfiguration5

Use this method to set an SCM Configuration with the IQ Server.

Permissions required: Edit System Configuration and Users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetConfiguration5Request
*/
func (a *ConfigSourceControlAPIService) SetConfiguration5(ctx context.Context) ApiSetConfiguration5Request {
	return ApiSetConfiguration5Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ConfigSourceControlAPIService) SetConfiguration5Execute(r ApiSetConfiguration5Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigSourceControlAPIService.SetConfiguration5")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/sourceControl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiSourceControlConfigurationDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
