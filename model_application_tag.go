/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.196.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the ApplicationTag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationTag{}

// ApplicationTag struct for ApplicationTag
type ApplicationTag struct {
	ApplicationId *string `json:"applicationId,omitempty"`
	Id *string `json:"id,omitempty"`
	TagId *string `json:"tagId,omitempty"`
}

// NewApplicationTag instantiates a new ApplicationTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationTag() *ApplicationTag {
	this := ApplicationTag{}
	return &this
}

// NewApplicationTagWithDefaults instantiates a new ApplicationTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationTagWithDefaults() *ApplicationTag {
	this := ApplicationTag{}
	return &this
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *ApplicationTag) GetApplicationId() string {
	if o == nil || IsNil(o.ApplicationId) {
		var ret string
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationTag) GetApplicationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationId) {
		return nil, false
	}
	return o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *ApplicationTag) HasApplicationId() bool {
	if o != nil && !IsNil(o.ApplicationId) {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given string and assigns it to the ApplicationId field.
func (o *ApplicationTag) SetApplicationId(v string) {
	o.ApplicationId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplicationTag) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationTag) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplicationTag) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplicationTag) SetId(v string) {
	o.Id = &v
}

// GetTagId returns the TagId field value if set, zero value otherwise.
func (o *ApplicationTag) GetTagId() string {
	if o == nil || IsNil(o.TagId) {
		var ret string
		return ret
	}
	return *o.TagId
}

// GetTagIdOk returns a tuple with the TagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationTag) GetTagIdOk() (*string, bool) {
	if o == nil || IsNil(o.TagId) {
		return nil, false
	}
	return o.TagId, true
}

// HasTagId returns a boolean if a field has been set.
func (o *ApplicationTag) HasTagId() bool {
	if o != nil && !IsNil(o.TagId) {
		return true
	}

	return false
}

// SetTagId gets a reference to the given string and assigns it to the TagId field.
func (o *ApplicationTag) SetTagId(v string) {
	o.TagId = &v
}

func (o ApplicationTag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationTag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationId) {
		toSerialize["applicationId"] = o.ApplicationId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TagId) {
		toSerialize["tagId"] = o.TagId
	}
	return toSerialize, nil
}

type NullableApplicationTag struct {
	value *ApplicationTag
	isSet bool
}

func (v NullableApplicationTag) Get() *ApplicationTag {
	return v.value
}

func (v *NullableApplicationTag) Set(val *ApplicationTag) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationTag) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationTag(val *ApplicationTag) *NullableApplicationTag {
	return &NullableApplicationTag{value: val, isSet: true}
}

func (v NullableApplicationTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


