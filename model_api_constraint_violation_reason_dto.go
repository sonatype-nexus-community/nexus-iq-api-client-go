/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.192.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the ApiConstraintViolationReasonDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiConstraintViolationReasonDTO{}

// ApiConstraintViolationReasonDTO struct for ApiConstraintViolationReasonDTO
type ApiConstraintViolationReasonDTO struct {
	Reason *string `json:"reason,omitempty"`
	Reference *TriggerReference `json:"reference,omitempty"`
}

// NewApiConstraintViolationReasonDTO instantiates a new ApiConstraintViolationReasonDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiConstraintViolationReasonDTO() *ApiConstraintViolationReasonDTO {
	this := ApiConstraintViolationReasonDTO{}
	return &this
}

// NewApiConstraintViolationReasonDTOWithDefaults instantiates a new ApiConstraintViolationReasonDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiConstraintViolationReasonDTOWithDefaults() *ApiConstraintViolationReasonDTO {
	this := ApiConstraintViolationReasonDTO{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ApiConstraintViolationReasonDTO) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiConstraintViolationReasonDTO) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ApiConstraintViolationReasonDTO) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ApiConstraintViolationReasonDTO) SetReason(v string) {
	o.Reason = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *ApiConstraintViolationReasonDTO) GetReference() TriggerReference {
	if o == nil || IsNil(o.Reference) {
		var ret TriggerReference
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiConstraintViolationReasonDTO) GetReferenceOk() (*TriggerReference, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *ApiConstraintViolationReasonDTO) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given TriggerReference and assigns it to the Reference field.
func (o *ApiConstraintViolationReasonDTO) SetReference(v TriggerReference) {
	o.Reference = &v
}

func (o ApiConstraintViolationReasonDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiConstraintViolationReasonDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	return toSerialize, nil
}

type NullableApiConstraintViolationReasonDTO struct {
	value *ApiConstraintViolationReasonDTO
	isSet bool
}

func (v NullableApiConstraintViolationReasonDTO) Get() *ApiConstraintViolationReasonDTO {
	return v.value
}

func (v *NullableApiConstraintViolationReasonDTO) Set(val *ApiConstraintViolationReasonDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableApiConstraintViolationReasonDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableApiConstraintViolationReasonDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiConstraintViolationReasonDTO(val *ApiConstraintViolationReasonDTO) *NullableApiConstraintViolationReasonDTO {
	return &NullableApiConstraintViolationReasonDTO{value: val, isSet: true}
}

func (v NullableApiConstraintViolationReasonDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiConstraintViolationReasonDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


