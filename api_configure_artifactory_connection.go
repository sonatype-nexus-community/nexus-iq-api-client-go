/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.193.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ConfigureArtifactoryConnectionAPIService ConfigureArtifactoryConnectionAPI service
type ConfigureArtifactoryConnectionAPIService service

type ApiAddArtifactoryConnectionRequest struct {
	ctx context.Context
	ApiService *ConfigureArtifactoryConnectionAPIService
	ownerType string
	internalOwnerId string
	apiArtifactoryConnectionDTO *ApiArtifactoryConnectionDTO
}

// Enter values for the new Artifactory connection.&lt;ul&gt;&lt;li&gt;&#x60;isAnonymous&#x60; indicates if the connection is anonymous.&lt;/li&gt;&lt;li&gt;&#x60;baseUrl&#x60; is the baseURL of the Artifactory instance.&lt;/li&gt;&lt;li&gt;&#x60;username&#x60; and &#x60;password&#x60; to authenticate the Artifactory connection.&lt;/li&gt;&lt;/ul&gt;
func (r ApiAddArtifactoryConnectionRequest) ApiArtifactoryConnectionDTO(apiArtifactoryConnectionDTO ApiArtifactoryConnectionDTO) ApiAddArtifactoryConnectionRequest {
	r.apiArtifactoryConnectionDTO = &apiArtifactoryConnectionDTO
	return r
}

func (r ApiAddArtifactoryConnectionRequest) Execute() (*ApiArtifactoryConnectionDTO, *http.Response, error) {
	return r.ApiService.AddArtifactoryConnectionExecute(r)
}

/*
AddArtifactoryConnection Method for AddArtifactoryConnection

Use this method to add a new Artifactory connection.

Permissions required: Edit IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Select the owner type.
 @param internalOwnerId Enter the internal ID of the owner.
 @return ApiAddArtifactoryConnectionRequest
*/
func (a *ConfigureArtifactoryConnectionAPIService) AddArtifactoryConnection(ctx context.Context, ownerType string, internalOwnerId string) ApiAddArtifactoryConnectionRequest {
	return ApiAddArtifactoryConnectionRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		internalOwnerId: internalOwnerId,
	}
}

// Execute executes the request
//  @return ApiArtifactoryConnectionDTO
func (a *ConfigureArtifactoryConnectionAPIService) AddArtifactoryConnectionExecute(r ApiAddArtifactoryConnectionRequest) (*ApiArtifactoryConnectionDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiArtifactoryConnectionDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigureArtifactoryConnectionAPIService.AddArtifactoryConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"internalOwnerId"+"}", url.PathEscape(parameterValueToString(r.internalOwnerId, "internalOwnerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiArtifactoryConnectionDTO == nil {
		return localVarReturnValue, nil, reportError("apiArtifactoryConnectionDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiArtifactoryConnectionDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteArtifactoryConnectionRequest struct {
	ctx context.Context
	ApiService *ConfigureArtifactoryConnectionAPIService
	ownerType string
	internalOwnerId string
	artifactoryConnectionId string
}

func (r ApiDeleteArtifactoryConnectionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteArtifactoryConnectionExecute(r)
}

/*
DeleteArtifactoryConnection Method for DeleteArtifactoryConnection

Use this method to delete an existing Artifactory connection.

Permissions required: Edit IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Select the owner type.
 @param internalOwnerId Enter the internal ID of the owner.
 @param artifactoryConnectionId Enter the Artifactory connection ID.
 @return ApiDeleteArtifactoryConnectionRequest
*/
func (a *ConfigureArtifactoryConnectionAPIService) DeleteArtifactoryConnection(ctx context.Context, ownerType string, internalOwnerId string, artifactoryConnectionId string) ApiDeleteArtifactoryConnectionRequest {
	return ApiDeleteArtifactoryConnectionRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		internalOwnerId: internalOwnerId,
		artifactoryConnectionId: artifactoryConnectionId,
	}
}

// Execute executes the request
func (a *ConfigureArtifactoryConnectionAPIService) DeleteArtifactoryConnectionExecute(r ApiDeleteArtifactoryConnectionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigureArtifactoryConnectionAPIService.DeleteArtifactoryConnection")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}/{artifactoryConnectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"internalOwnerId"+"}", url.PathEscape(parameterValueToString(r.internalOwnerId, "internalOwnerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"artifactoryConnectionId"+"}", url.PathEscape(parameterValueToString(r.artifactoryConnectionId, "artifactoryConnectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetArtifactoryConnectionRequest struct {
	ctx context.Context
	ApiService *ConfigureArtifactoryConnectionAPIService
	ownerType string
	internalOwnerId string
	artifactoryConnectionId string
}

func (r ApiGetArtifactoryConnectionRequest) Execute() (*ApiArtifactoryConnectionDTO, *http.Response, error) {
	return r.ApiService.GetArtifactoryConnectionExecute(r)
}

/*
GetArtifactoryConnection Method for GetArtifactoryConnection

Use this method to retrieve details for an Artifactory connection.

Permissions required: View IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Select the owner type.
 @param internalOwnerId Enter the internal ID of the owner.
 @param artifactoryConnectionId Enter the Artifactory connection ID.
 @return ApiGetArtifactoryConnectionRequest
*/
func (a *ConfigureArtifactoryConnectionAPIService) GetArtifactoryConnection(ctx context.Context, ownerType string, internalOwnerId string, artifactoryConnectionId string) ApiGetArtifactoryConnectionRequest {
	return ApiGetArtifactoryConnectionRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		internalOwnerId: internalOwnerId,
		artifactoryConnectionId: artifactoryConnectionId,
	}
}

// Execute executes the request
//  @return ApiArtifactoryConnectionDTO
func (a *ConfigureArtifactoryConnectionAPIService) GetArtifactoryConnectionExecute(r ApiGetArtifactoryConnectionRequest) (*ApiArtifactoryConnectionDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiArtifactoryConnectionDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigureArtifactoryConnectionAPIService.GetArtifactoryConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}/{artifactoryConnectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"internalOwnerId"+"}", url.PathEscape(parameterValueToString(r.internalOwnerId, "internalOwnerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"artifactoryConnectionId"+"}", url.PathEscape(parameterValueToString(r.artifactoryConnectionId, "artifactoryConnectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOwnerArtifactoryConnectionRequest struct {
	ctx context.Context
	ApiService *ConfigureArtifactoryConnectionAPIService
	ownerType string
	internalOwnerId string
	inherit *bool
}

// Specify whether to include details from an inherited Artifactory connection.
func (r ApiGetOwnerArtifactoryConnectionRequest) Inherit(inherit bool) ApiGetOwnerArtifactoryConnectionRequest {
	r.inherit = &inherit
	return r
}

func (r ApiGetOwnerArtifactoryConnectionRequest) Execute() (*ApiOwnerArtifactoryConnectionDTO, *http.Response, error) {
	return r.ApiService.GetOwnerArtifactoryConnectionExecute(r)
}

/*
GetOwnerArtifactoryConnection Method for GetOwnerArtifactoryConnection

Use this method to retrieve Artifactory connection details by specifying the owner Id.

Permissions required: View IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Select the owner type.
 @param internalOwnerId Enter the internal ID of the owner.
 @return ApiGetOwnerArtifactoryConnectionRequest
*/
func (a *ConfigureArtifactoryConnectionAPIService) GetOwnerArtifactoryConnection(ctx context.Context, ownerType string, internalOwnerId string) ApiGetOwnerArtifactoryConnectionRequest {
	return ApiGetOwnerArtifactoryConnectionRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		internalOwnerId: internalOwnerId,
	}
}

// Execute executes the request
//  @return ApiOwnerArtifactoryConnectionDTO
func (a *ConfigureArtifactoryConnectionAPIService) GetOwnerArtifactoryConnectionExecute(r ApiGetOwnerArtifactoryConnectionRequest) (*ApiOwnerArtifactoryConnectionDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiOwnerArtifactoryConnectionDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigureArtifactoryConnectionAPIService.GetOwnerArtifactoryConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"internalOwnerId"+"}", url.PathEscape(parameterValueToString(r.internalOwnerId, "internalOwnerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.inherit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inherit", r.inherit, "form", "")
	} else {
		var defaultValue bool = false
		r.inherit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTestArtifactoryConnectionRequest struct {
	ctx context.Context
	ApiService *ConfigureArtifactoryConnectionAPIService
	ownerType string
	internalOwnerId string
	apiArtifactoryConnectionDTO *ApiArtifactoryConnectionDTO
}

// Enter values for the Artifactory connection.&lt;ul&gt;&lt;li&gt;&#x60;baseUrl&#x60; is the baseURL of the Artifactory instance.&lt;/li&gt;&lt;li&gt;&#x60;username&#x60; and &#x60;password&#x60; to authenticate the Artifactory connection.&lt;/li&gt;&lt;/ul&gt;
func (r ApiTestArtifactoryConnectionRequest) ApiArtifactoryConnectionDTO(apiArtifactoryConnectionDTO ApiArtifactoryConnectionDTO) ApiTestArtifactoryConnectionRequest {
	r.apiArtifactoryConnectionDTO = &apiArtifactoryConnectionDTO
	return r
}

func (r ApiTestArtifactoryConnectionRequest) Execute() (*ApiStatusDTO, *http.Response, error) {
	return r.ApiService.TestArtifactoryConnectionExecute(r)
}

/*
TestArtifactoryConnection Method for TestArtifactoryConnection

Use this method to test an Artifactory connection for the specified owner.

Permissons required: View IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Select the owner type.
 @param internalOwnerId Enter the internal ID of the owner.
 @return ApiTestArtifactoryConnectionRequest
*/
func (a *ConfigureArtifactoryConnectionAPIService) TestArtifactoryConnection(ctx context.Context, ownerType string, internalOwnerId string) ApiTestArtifactoryConnectionRequest {
	return ApiTestArtifactoryConnectionRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		internalOwnerId: internalOwnerId,
	}
}

// Execute executes the request
//  @return ApiStatusDTO
func (a *ConfigureArtifactoryConnectionAPIService) TestArtifactoryConnectionExecute(r ApiTestArtifactoryConnectionRequest) (*ApiStatusDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiStatusDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigureArtifactoryConnectionAPIService.TestArtifactoryConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}/test"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"internalOwnerId"+"}", url.PathEscape(parameterValueToString(r.internalOwnerId, "internalOwnerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiArtifactoryConnectionDTO == nil {
		return localVarReturnValue, nil, reportError("apiArtifactoryConnectionDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiArtifactoryConnectionDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTestArtifactoryConnection1Request struct {
	ctx context.Context
	ApiService *ConfigureArtifactoryConnectionAPIService
	ownerType string
	internalOwnerId string
	artifactoryConnectionId string
}

func (r ApiTestArtifactoryConnection1Request) Execute() (*ApiStatusDTO, *http.Response, error) {
	return r.ApiService.TestArtifactoryConnection1Execute(r)
}

/*
TestArtifactoryConnection1 Method for TestArtifactoryConnection1

Use this method to test an existing Artifactory connection using the connection ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the owner type.
 @param internalOwnerId Enter the internal ID of the owner.
 @param artifactoryConnectionId Enter the Artifactory connection ID.
 @return ApiTestArtifactoryConnection1Request
*/
func (a *ConfigureArtifactoryConnectionAPIService) TestArtifactoryConnection1(ctx context.Context, ownerType string, internalOwnerId string, artifactoryConnectionId string) ApiTestArtifactoryConnection1Request {
	return ApiTestArtifactoryConnection1Request{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		internalOwnerId: internalOwnerId,
		artifactoryConnectionId: artifactoryConnectionId,
	}
}

// Execute executes the request
//  @return ApiStatusDTO
func (a *ConfigureArtifactoryConnectionAPIService) TestArtifactoryConnection1Execute(r ApiTestArtifactoryConnection1Request) (*ApiStatusDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiStatusDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigureArtifactoryConnectionAPIService.TestArtifactoryConnection1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}/{artifactoryConnectionId}/test"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"internalOwnerId"+"}", url.PathEscape(parameterValueToString(r.internalOwnerId, "internalOwnerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"artifactoryConnectionId"+"}", url.PathEscape(parameterValueToString(r.artifactoryConnectionId, "artifactoryConnectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateArtifactoryConnectionRequest struct {
	ctx context.Context
	ApiService *ConfigureArtifactoryConnectionAPIService
	ownerType string
	internalOwnerId string
	artifactoryConnectionId string
	apiArtifactoryConnectionDTO *ApiArtifactoryConnectionDTO
}

// Enter values for the new Artifactory connection.&lt;ul&gt;&lt;li&gt;&#x60;isAnonymous&#x60; indicates if the connection is anonymous.&lt;/li&gt;&lt;li&gt;&#x60;baseUrl&#x60; is the baseURL of the Artifactory instance.&lt;/li&gt;&lt;li&gt;&#x60;username&#x60; and &#x60;password&#x60; to authenticate the Artifactory connection.&lt;/li&gt;&lt;/ul&gt;
func (r ApiUpdateArtifactoryConnectionRequest) ApiArtifactoryConnectionDTO(apiArtifactoryConnectionDTO ApiArtifactoryConnectionDTO) ApiUpdateArtifactoryConnectionRequest {
	r.apiArtifactoryConnectionDTO = &apiArtifactoryConnectionDTO
	return r
}

func (r ApiUpdateArtifactoryConnectionRequest) Execute() (*ApiArtifactoryConnectionDTO, *http.Response, error) {
	return r.ApiService.UpdateArtifactoryConnectionExecute(r)
}

/*
UpdateArtifactoryConnection Method for UpdateArtifactoryConnection

Use this method to update an existing Artifactory connection.

Permissions required: Edit IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Specify the owner type.
 @param internalOwnerId Enter the internal ID of the owner.
 @param artifactoryConnectionId Enter the Artifactory connection ID.
 @return ApiUpdateArtifactoryConnectionRequest
*/
func (a *ConfigureArtifactoryConnectionAPIService) UpdateArtifactoryConnection(ctx context.Context, ownerType string, internalOwnerId string, artifactoryConnectionId string) ApiUpdateArtifactoryConnectionRequest {
	return ApiUpdateArtifactoryConnectionRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		internalOwnerId: internalOwnerId,
		artifactoryConnectionId: artifactoryConnectionId,
	}
}

// Execute executes the request
//  @return ApiArtifactoryConnectionDTO
func (a *ConfigureArtifactoryConnectionAPIService) UpdateArtifactoryConnectionExecute(r ApiUpdateArtifactoryConnectionRequest) (*ApiArtifactoryConnectionDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiArtifactoryConnectionDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigureArtifactoryConnectionAPIService.UpdateArtifactoryConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}/{artifactoryConnectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"internalOwnerId"+"}", url.PathEscape(parameterValueToString(r.internalOwnerId, "internalOwnerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"artifactoryConnectionId"+"}", url.PathEscape(parameterValueToString(r.artifactoryConnectionId, "artifactoryConnectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiArtifactoryConnectionDTO == nil {
		return localVarReturnValue, nil, reportError("apiArtifactoryConnectionDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiArtifactoryConnectionDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOwnerArtifactoryConnectionStatusRequest struct {
	ctx context.Context
	ApiService *ConfigureArtifactoryConnectionAPIService
	ownerType string
	internalOwnerId string
	apiArtifactoryConnectionStatusRequestDTO *ApiArtifactoryConnectionStatusRequestDTO
}

// Set values for the connection properties &#x60;enabled&#x60; and &#x60;allowOverride&#x60;.
func (r ApiUpdateOwnerArtifactoryConnectionStatusRequest) ApiArtifactoryConnectionStatusRequestDTO(apiArtifactoryConnectionStatusRequestDTO ApiArtifactoryConnectionStatusRequestDTO) ApiUpdateOwnerArtifactoryConnectionStatusRequest {
	r.apiArtifactoryConnectionStatusRequestDTO = &apiArtifactoryConnectionStatusRequestDTO
	return r
}

func (r ApiUpdateOwnerArtifactoryConnectionStatusRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateOwnerArtifactoryConnectionStatusExecute(r)
}

/*
UpdateOwnerArtifactoryConnectionStatus Method for UpdateOwnerArtifactoryConnectionStatus

Use this method to enable/disable an existing Artifactory connection for the specified owner.

Permissions required: Edit IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Select the owner type.
 @param internalOwnerId Enter the internal ID of the owner.
 @return ApiUpdateOwnerArtifactoryConnectionStatusRequest
*/
func (a *ConfigureArtifactoryConnectionAPIService) UpdateOwnerArtifactoryConnectionStatus(ctx context.Context, ownerType string, internalOwnerId string) ApiUpdateOwnerArtifactoryConnectionStatusRequest {
	return ApiUpdateOwnerArtifactoryConnectionStatusRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		internalOwnerId: internalOwnerId,
	}
}

// Execute executes the request
func (a *ConfigureArtifactoryConnectionAPIService) UpdateOwnerArtifactoryConnectionStatusExecute(r ApiUpdateOwnerArtifactoryConnectionStatusRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigureArtifactoryConnectionAPIService.UpdateOwnerArtifactoryConnectionStatus")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"internalOwnerId"+"}", url.PathEscape(parameterValueToString(r.internalOwnerId, "internalOwnerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiArtifactoryConnectionStatusRequestDTO == nil {
		return nil, reportError("apiArtifactoryConnectionStatusRequestDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiArtifactoryConnectionStatusRequestDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
