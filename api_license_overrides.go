/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.195.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// LicenseOverridesAPIService LicenseOverridesAPI service
type LicenseOverridesAPIService service

type ApiAddLicenseOverrideRequest struct {
	ctx context.Context
	ApiService *LicenseOverridesAPIService
	ownerType string
	ownerId string
	apiLicenseOverrideDTO *ApiLicenseOverrideDTO
	where *string
}

// Enter the license override details to add or update a license override for a component. The request body should contain the following fields:  - &#x60;ownerId&#x60;: Enter the id of the application, organization or the repository.  - &#x60;comment&#x60;: Enter a comment for the license override.  - &#x60;licenseIds&#x60;: Enter the license ids for the license override.  - &#x60;componentIdentifier&#x60;: Enter the componentIdentifier consisting of format and coordinates.  - &#x60;status&#x60;: Enter the status of the license override. The possible values are &#x60;OPEN&#x60;, &#x60;ACKNOWLEDGED&#x60;, &#x60;OVERRIDDEN&#x60;, &#x60;SELECTED&#x60;, and &#x60;CONFIRMED&#x60;.
func (r ApiAddLicenseOverrideRequest) ApiLicenseOverrideDTO(apiLicenseOverrideDTO ApiLicenseOverrideDTO) ApiAddLicenseOverrideRequest {
	r.apiLicenseOverrideDTO = &apiLicenseOverrideDTO
	return r
}

func (r ApiAddLicenseOverrideRequest) Where(where string) ApiAddLicenseOverrideRequest {
	r.where = &where
	return r
}

func (r ApiAddLicenseOverrideRequest) Execute() (*ApiLicenseOverrideDTO, *http.Response, error) {
	return r.ApiService.AddLicenseOverrideExecute(r)
}

/*
AddLicenseOverride Method for AddLicenseOverride

Use this method to add or update a license override to a component for a given owner scope.

Permissions required: Change Licenses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Select the `ownerType` scope for which you want to add or update a license override
 @param ownerId Enter the id of the application, organization or the repository.
 @return ApiAddLicenseOverrideRequest
*/
func (a *LicenseOverridesAPIService) AddLicenseOverride(ctx context.Context, ownerType string, ownerId string) ApiAddLicenseOverrideRequest {
	return ApiAddLicenseOverrideRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
	}
}

// Execute executes the request
//  @return ApiLicenseOverrideDTO
func (a *LicenseOverridesAPIService) AddLicenseOverrideExecute(r ApiAddLicenseOverrideRequest) (*ApiLicenseOverrideDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiLicenseOverrideDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseOverridesAPIService.AddLicenseOverride")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseOverrides/{ownerType}/{ownerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiLicenseOverrideDTO == nil {
		return localVarReturnValue, nil, reportError("apiLicenseOverrideDTO is required and must be specified")
	}

	if r.where != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "where", r.where, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiLicenseOverrideDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteLicenseOverrideRequest struct {
	ctx context.Context
	ApiService *LicenseOverridesAPIService
	ownerType string
	ownerId string
	licenseOverrideId string
	where *string
}

func (r ApiDeleteLicenseOverrideRequest) Where(where string) ApiDeleteLicenseOverrideRequest {
	r.where = &where
	return r
}

func (r ApiDeleteLicenseOverrideRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLicenseOverrideExecute(r)
}

/*
DeleteLicenseOverride Method for DeleteLicenseOverride

Use this method to delete a license override for a component.

Permissions required: Change Licenses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Select the `ownerType` scope for which you want to delete license override
 @param ownerId Enter the id of the application, organization or the repository.
 @param licenseOverrideId Enter the id of the license override you want to delete.
 @return ApiDeleteLicenseOverrideRequest
*/
func (a *LicenseOverridesAPIService) DeleteLicenseOverride(ctx context.Context, ownerType string, ownerId string, licenseOverrideId string) ApiDeleteLicenseOverrideRequest {
	return ApiDeleteLicenseOverrideRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
		licenseOverrideId: licenseOverrideId,
	}
}

// Execute executes the request
func (a *LicenseOverridesAPIService) DeleteLicenseOverrideExecute(r ApiDeleteLicenseOverrideRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseOverridesAPIService.DeleteLicenseOverride")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseOverrides/{ownerType}/{ownerId}/{licenseOverrideId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"licenseOverrideId"+"}", url.PathEscape(parameterValueToString(r.licenseOverrideId, "licenseOverrideId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.where != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "where", r.where, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAppliedLicenseOverridesRequest struct {
	ctx context.Context
	ApiService *LicenseOverridesAPIService
	ownerType string
	ownerId string
	componentIdentifier *ComponentIdentifier
}

// Enter the componentIdentifier consisting of format and coordinates as a JSON e.g., &#x60;?componentIdentifier&#x3D;{\&quot;format\&quot;:\&quot;maven\&quot;,\&quot;coordinates\&quot;:\&quot;{...}}\&quot;}
func (r ApiGetAppliedLicenseOverridesRequest) ComponentIdentifier(componentIdentifier ComponentIdentifier) ApiGetAppliedLicenseOverridesRequest {
	r.componentIdentifier = &componentIdentifier
	return r
}

func (r ApiGetAppliedLicenseOverridesRequest) Execute() (*ApiAppliedLicenseOverridesDTO, *http.Response, error) {
	return r.ApiService.GetAppliedLicenseOverridesExecute(r)
}

/*
GetAppliedLicenseOverrides Method for GetAppliedLicenseOverrides

Use this method to retrieve the applied license overrides for a component.

Permissions required: View IQ Elements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Select the `ownerType` for which you want to retrieve the applied license overrides.
 @param ownerId Enter the id of the application, organization or the repository.
 @return ApiGetAppliedLicenseOverridesRequest
*/
func (a *LicenseOverridesAPIService) GetAppliedLicenseOverrides(ctx context.Context, ownerType string, ownerId string) ApiGetAppliedLicenseOverridesRequest {
	return ApiGetAppliedLicenseOverridesRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
	}
}

// Execute executes the request
//  @return ApiAppliedLicenseOverridesDTO
func (a *LicenseOverridesAPIService) GetAppliedLicenseOverridesExecute(r ApiGetAppliedLicenseOverridesRequest) (*ApiAppliedLicenseOverridesDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiAppliedLicenseOverridesDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseOverridesAPIService.GetAppliedLicenseOverrides")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseOverrides/{ownerType}/{ownerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentIdentifier == nil {
		return localVarReturnValue, nil, reportError("componentIdentifier is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "componentIdentifier", r.componentIdentifier, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAppliedLicenseOverridesForLegalReviewerRequest struct {
	ctx context.Context
	ApiService *LicenseOverridesAPIService
	ownerType string
	ownerId string
	componentIdentifier *ComponentIdentifier
}

// Enter the component format and coordinates.
func (r ApiGetAppliedLicenseOverridesForLegalReviewerRequest) ComponentIdentifier(componentIdentifier ComponentIdentifier) ApiGetAppliedLicenseOverridesForLegalReviewerRequest {
	r.componentIdentifier = &componentIdentifier
	return r
}

func (r ApiGetAppliedLicenseOverridesForLegalReviewerRequest) Execute() (*ApiAppliedLicenseOverridesDTO, *http.Response, error) {
	return r.ApiService.GetAppliedLicenseOverridesForLegalReviewerExecute(r)
}

/*
GetAppliedLicenseOverridesForLegalReviewer Method for GetAppliedLicenseOverridesForLegalReviewer

Use this method to retrieve the applied license overrides for a given component and owner.

Permissions required: Review Legal Obligations For Components Licenses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Select the `ownerType` for which you want to retrieve the applied license overrides.
 @param ownerId Enter the id of the owner.
 @return ApiGetAppliedLicenseOverridesForLegalReviewerRequest
*/
func (a *LicenseOverridesAPIService) GetAppliedLicenseOverridesForLegalReviewer(ctx context.Context, ownerType string, ownerId string) ApiGetAppliedLicenseOverridesForLegalReviewerRequest {
	return ApiGetAppliedLicenseOverridesForLegalReviewerRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
	}
}

// Execute executes the request
//  @return ApiAppliedLicenseOverridesDTO
func (a *LicenseOverridesAPIService) GetAppliedLicenseOverridesForLegalReviewerExecute(r ApiGetAppliedLicenseOverridesForLegalReviewerRequest) (*ApiAppliedLicenseOverridesDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiAppliedLicenseOverridesDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LicenseOverridesAPIService.GetAppliedLicenseOverridesForLegalReviewer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/licenseOverrides/{ownerType}/{ownerId}/legalReviewer"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentIdentifier == nil {
		return localVarReturnValue, nil, reportError("componentIdentifier is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "componentIdentifier", r.componentIdentifier, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
