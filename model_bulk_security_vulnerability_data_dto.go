/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.196.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the BulkSecurityVulnerabilityDataDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkSecurityVulnerabilityDataDTO{}

// BulkSecurityVulnerabilityDataDTO struct for BulkSecurityVulnerabilityDataDTO
type BulkSecurityVulnerabilityDataDTO struct {
	Vulnerabilities *map[string]SecurityVulnerabilityData `json:"vulnerabilities,omitempty"`
}

// NewBulkSecurityVulnerabilityDataDTO instantiates a new BulkSecurityVulnerabilityDataDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkSecurityVulnerabilityDataDTO() *BulkSecurityVulnerabilityDataDTO {
	this := BulkSecurityVulnerabilityDataDTO{}
	return &this
}

// NewBulkSecurityVulnerabilityDataDTOWithDefaults instantiates a new BulkSecurityVulnerabilityDataDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkSecurityVulnerabilityDataDTOWithDefaults() *BulkSecurityVulnerabilityDataDTO {
	this := BulkSecurityVulnerabilityDataDTO{}
	return &this
}

// GetVulnerabilities returns the Vulnerabilities field value if set, zero value otherwise.
func (o *BulkSecurityVulnerabilityDataDTO) GetVulnerabilities() map[string]SecurityVulnerabilityData {
	if o == nil || IsNil(o.Vulnerabilities) {
		var ret map[string]SecurityVulnerabilityData
		return ret
	}
	return *o.Vulnerabilities
}

// GetVulnerabilitiesOk returns a tuple with the Vulnerabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkSecurityVulnerabilityDataDTO) GetVulnerabilitiesOk() (*map[string]SecurityVulnerabilityData, bool) {
	if o == nil || IsNil(o.Vulnerabilities) {
		return nil, false
	}
	return o.Vulnerabilities, true
}

// HasVulnerabilities returns a boolean if a field has been set.
func (o *BulkSecurityVulnerabilityDataDTO) HasVulnerabilities() bool {
	if o != nil && !IsNil(o.Vulnerabilities) {
		return true
	}

	return false
}

// SetVulnerabilities gets a reference to the given map[string]SecurityVulnerabilityData and assigns it to the Vulnerabilities field.
func (o *BulkSecurityVulnerabilityDataDTO) SetVulnerabilities(v map[string]SecurityVulnerabilityData) {
	o.Vulnerabilities = &v
}

func (o BulkSecurityVulnerabilityDataDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkSecurityVulnerabilityDataDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vulnerabilities) {
		toSerialize["vulnerabilities"] = o.Vulnerabilities
	}
	return toSerialize, nil
}

type NullableBulkSecurityVulnerabilityDataDTO struct {
	value *BulkSecurityVulnerabilityDataDTO
	isSet bool
}

func (v NullableBulkSecurityVulnerabilityDataDTO) Get() *BulkSecurityVulnerabilityDataDTO {
	return v.value
}

func (v *NullableBulkSecurityVulnerabilityDataDTO) Set(val *BulkSecurityVulnerabilityDataDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkSecurityVulnerabilityDataDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkSecurityVulnerabilityDataDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkSecurityVulnerabilityDataDTO(val *BulkSecurityVulnerabilityDataDTO) *NullableBulkSecurityVulnerabilityDataDTO {
	return &NullableBulkSecurityVulnerabilityDataDTO{value: val, isSet: true}
}

func (v NullableBulkSecurityVulnerabilityDataDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkSecurityVulnerabilityDataDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


