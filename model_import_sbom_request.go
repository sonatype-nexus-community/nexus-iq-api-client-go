/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.182.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImportSbomRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportSbomRequest{}

// ImportSbomRequest struct for ImportSbomRequest
type ImportSbomRequest struct {
	// The internal id of the application
	ApplicationId string `json:"applicationId"`
	File map[string]interface{} `json:"file,omitempty"`
}

type _ImportSbomRequest ImportSbomRequest

// NewImportSbomRequest instantiates a new ImportSbomRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportSbomRequest(applicationId string) *ImportSbomRequest {
	this := ImportSbomRequest{}
	this.ApplicationId = applicationId
	return &this
}

// NewImportSbomRequestWithDefaults instantiates a new ImportSbomRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportSbomRequestWithDefaults() *ImportSbomRequest {
	this := ImportSbomRequest{}
	return &this
}

// GetApplicationId returns the ApplicationId field value
func (o *ImportSbomRequest) GetApplicationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value
// and a boolean to check if the value has been set.
func (o *ImportSbomRequest) GetApplicationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationId, true
}

// SetApplicationId sets field value
func (o *ImportSbomRequest) SetApplicationId(v string) {
	o.ApplicationId = v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *ImportSbomRequest) GetFile() map[string]interface{} {
	if o == nil || IsNil(o.File) {
		var ret map[string]interface{}
		return ret
	}
	return o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportSbomRequest) GetFileOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.File) {
		return map[string]interface{}{}, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *ImportSbomRequest) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given map[string]interface{} and assigns it to the File field.
func (o *ImportSbomRequest) SetFile(v map[string]interface{}) {
	o.File = v
}

func (o ImportSbomRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportSbomRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["applicationId"] = o.ApplicationId
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	return toSerialize, nil
}

func (o *ImportSbomRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"applicationId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportSbomRequest := _ImportSbomRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportSbomRequest)

	if err != nil {
		return err
	}

	*o = ImportSbomRequest(varImportSbomRequest)

	return err
}

type NullableImportSbomRequest struct {
	value *ImportSbomRequest
	isSet bool
}

func (v NullableImportSbomRequest) Get() *ImportSbomRequest {
	return v.value
}

func (v *NullableImportSbomRequest) Set(val *ImportSbomRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImportSbomRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImportSbomRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportSbomRequest(val *ImportSbomRequest) *NullableImportSbomRequest {
	return &NullableImportSbomRequest{value: val, isSet: true}
}

func (v NullableImportSbomRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportSbomRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


