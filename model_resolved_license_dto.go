/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.193.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the ResolvedLicenseDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResolvedLicenseDTO{}

// ResolvedLicenseDTO struct for ResolvedLicenseDTO
type ResolvedLicenseDTO struct {
	LicenseId *string `json:"licenseId,omitempty"`
	LicenseName *string `json:"licenseName,omitempty"`
	OverrideStatus *string `json:"overrideStatus,omitempty"`
}

// NewResolvedLicenseDTO instantiates a new ResolvedLicenseDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolvedLicenseDTO() *ResolvedLicenseDTO {
	this := ResolvedLicenseDTO{}
	return &this
}

// NewResolvedLicenseDTOWithDefaults instantiates a new ResolvedLicenseDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolvedLicenseDTOWithDefaults() *ResolvedLicenseDTO {
	this := ResolvedLicenseDTO{}
	return &this
}

// GetLicenseId returns the LicenseId field value if set, zero value otherwise.
func (o *ResolvedLicenseDTO) GetLicenseId() string {
	if o == nil || IsNil(o.LicenseId) {
		var ret string
		return ret
	}
	return *o.LicenseId
}

// GetLicenseIdOk returns a tuple with the LicenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedLicenseDTO) GetLicenseIdOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseId) {
		return nil, false
	}
	return o.LicenseId, true
}

// HasLicenseId returns a boolean if a field has been set.
func (o *ResolvedLicenseDTO) HasLicenseId() bool {
	if o != nil && !IsNil(o.LicenseId) {
		return true
	}

	return false
}

// SetLicenseId gets a reference to the given string and assigns it to the LicenseId field.
func (o *ResolvedLicenseDTO) SetLicenseId(v string) {
	o.LicenseId = &v
}

// GetLicenseName returns the LicenseName field value if set, zero value otherwise.
func (o *ResolvedLicenseDTO) GetLicenseName() string {
	if o == nil || IsNil(o.LicenseName) {
		var ret string
		return ret
	}
	return *o.LicenseName
}

// GetLicenseNameOk returns a tuple with the LicenseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedLicenseDTO) GetLicenseNameOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseName) {
		return nil, false
	}
	return o.LicenseName, true
}

// HasLicenseName returns a boolean if a field has been set.
func (o *ResolvedLicenseDTO) HasLicenseName() bool {
	if o != nil && !IsNil(o.LicenseName) {
		return true
	}

	return false
}

// SetLicenseName gets a reference to the given string and assigns it to the LicenseName field.
func (o *ResolvedLicenseDTO) SetLicenseName(v string) {
	o.LicenseName = &v
}

// GetOverrideStatus returns the OverrideStatus field value if set, zero value otherwise.
func (o *ResolvedLicenseDTO) GetOverrideStatus() string {
	if o == nil || IsNil(o.OverrideStatus) {
		var ret string
		return ret
	}
	return *o.OverrideStatus
}

// GetOverrideStatusOk returns a tuple with the OverrideStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedLicenseDTO) GetOverrideStatusOk() (*string, bool) {
	if o == nil || IsNil(o.OverrideStatus) {
		return nil, false
	}
	return o.OverrideStatus, true
}

// HasOverrideStatus returns a boolean if a field has been set.
func (o *ResolvedLicenseDTO) HasOverrideStatus() bool {
	if o != nil && !IsNil(o.OverrideStatus) {
		return true
	}

	return false
}

// SetOverrideStatus gets a reference to the given string and assigns it to the OverrideStatus field.
func (o *ResolvedLicenseDTO) SetOverrideStatus(v string) {
	o.OverrideStatus = &v
}

func (o ResolvedLicenseDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResolvedLicenseDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LicenseId) {
		toSerialize["licenseId"] = o.LicenseId
	}
	if !IsNil(o.LicenseName) {
		toSerialize["licenseName"] = o.LicenseName
	}
	if !IsNil(o.OverrideStatus) {
		toSerialize["overrideStatus"] = o.OverrideStatus
	}
	return toSerialize, nil
}

type NullableResolvedLicenseDTO struct {
	value *ResolvedLicenseDTO
	isSet bool
}

func (v NullableResolvedLicenseDTO) Get() *ResolvedLicenseDTO {
	return v.value
}

func (v *NullableResolvedLicenseDTO) Set(val *ResolvedLicenseDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableResolvedLicenseDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableResolvedLicenseDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolvedLicenseDTO(val *ResolvedLicenseDTO) *NullableResolvedLicenseDTO {
	return &NullableResolvedLicenseDTO{value: val, isSet: true}
}

func (v NullableResolvedLicenseDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolvedLicenseDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


