/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.193.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ConfigProxyServerAPIService ConfigProxyServerAPI service
type ConfigProxyServerAPIService service

type ApiDeleteConfiguration3Request struct {
	ctx context.Context
	ApiService *ConfigProxyServerAPIService
}

func (r ApiDeleteConfiguration3Request) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConfiguration3Execute(r)
}

/*
DeleteConfiguration3 Method for DeleteConfiguration3

Use this method to remove an existing HTTP proxy server configuration.

Permissions required: Edit System Configuration and Users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteConfiguration3Request
*/
func (a *ConfigProxyServerAPIService) DeleteConfiguration3(ctx context.Context) ApiDeleteConfiguration3Request {
	return ApiDeleteConfiguration3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ConfigProxyServerAPIService) DeleteConfiguration3Execute(r ApiDeleteConfiguration3Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigProxyServerAPIService.DeleteConfiguration3")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/httpProxyServer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetConfiguration3Request struct {
	ctx context.Context
	ApiService *ConfigProxyServerAPIService
}

func (r ApiGetConfiguration3Request) Execute() (*ApiProxyServerConfigurationDTO, *http.Response, error) {
	return r.ApiService.GetConfiguration3Execute(r)
}

/*
GetConfiguration3 Method for GetConfiguration3

Use this method to inspect an existing HTTP proxy server configuration.

Permissions required: Edit System Configuration and Users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetConfiguration3Request
*/
func (a *ConfigProxyServerAPIService) GetConfiguration3(ctx context.Context) ApiGetConfiguration3Request {
	return ApiGetConfiguration3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiProxyServerConfigurationDTO
func (a *ConfigProxyServerAPIService) GetConfiguration3Execute(r ApiGetConfiguration3Request) (*ApiProxyServerConfigurationDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiProxyServerConfigurationDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigProxyServerAPIService.GetConfiguration3")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/httpProxyServer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetConfiguration3Request struct {
	ctx context.Context
	ApiService *ConfigProxyServerAPIService
	apiProxyServerConfigurationDTO *ApiProxyServerConfigurationDTO
}

// The request JSON could include: &lt;ul&gt;&lt;li&gt;&#x60;hostname&#x60; is host name or IP address of the HTTP proxy server to use for outgoing HTTP connections.&lt;/li&gt;&lt;li&gt;&#x60;port&#x60; is the port number for the HTTP proxy server.&lt;/li&gt;&lt;li&gt;&#x60;username&#x60; is the username used to authenticate with the HTTP proxy server.&lt;/li&gt;&lt;li&gt;&#x60;password&#x60; is the password used for authentication with the HTTP proxy server.&lt;/li&gt;&lt;li&gt;&#x60;passwordIsIncluded&#x60; should be &#x60;true&#x60; if password is included in the request.&lt;ul&gt;&lt;li&gt;If &#x60;true&#x60; but the password is not included the password will be considered as &#x60;null&#x60;.&lt;/li&gt;&lt;li&gt;Can be &#x60;false&#x60; for update operations that do not a require password change. Note that updating the hostname and port requires a password to be provided.&lt;/li&gt; &lt;/ul&gt;&lt;li&gt;&#x60;excludeHosts&#x60; is a list of host names that are to be excluded from using the HTTP proxy server.&lt;/li&gt;&lt;/ul&gt;
func (r ApiSetConfiguration3Request) ApiProxyServerConfigurationDTO(apiProxyServerConfigurationDTO ApiProxyServerConfigurationDTO) ApiSetConfiguration3Request {
	r.apiProxyServerConfigurationDTO = &apiProxyServerConfigurationDTO
	return r
}

func (r ApiSetConfiguration3Request) Execute() (*http.Response, error) {
	return r.ApiService.SetConfiguration3Execute(r)
}

/*
SetConfiguration3 Method for SetConfiguration3

Use this method to create or update an existing HTTP proxy server configuration.

Permissions required: Edit System Configuration and Users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetConfiguration3Request
*/
func (a *ConfigProxyServerAPIService) SetConfiguration3(ctx context.Context) ApiSetConfiguration3Request {
	return ApiSetConfiguration3Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ConfigProxyServerAPIService) SetConfiguration3Execute(r ApiSetConfiguration3Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigProxyServerAPIService.SetConfiguration3")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/config/httpProxyServer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiProxyServerConfigurationDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
