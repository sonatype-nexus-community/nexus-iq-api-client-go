/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.196.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the LicenseOverride type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseOverride{}

// LicenseOverride struct for LicenseOverride
type LicenseOverride struct {
	Comment *string `json:"comment,omitempty"`
	ComponentIdentifier *ComponentIdentifier `json:"componentIdentifier,omitempty"`
	Id *string `json:"id,omitempty"`
	LicenseIds []string `json:"licenseIds,omitempty"`
	OwnerId *string `json:"ownerId,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewLicenseOverride instantiates a new LicenseOverride object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseOverride() *LicenseOverride {
	this := LicenseOverride{}
	return &this
}

// NewLicenseOverrideWithDefaults instantiates a new LicenseOverride object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseOverrideWithDefaults() *LicenseOverride {
	this := LicenseOverride{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *LicenseOverride) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseOverride) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *LicenseOverride) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *LicenseOverride) SetComment(v string) {
	o.Comment = &v
}

// GetComponentIdentifier returns the ComponentIdentifier field value if set, zero value otherwise.
func (o *LicenseOverride) GetComponentIdentifier() ComponentIdentifier {
	if o == nil || IsNil(o.ComponentIdentifier) {
		var ret ComponentIdentifier
		return ret
	}
	return *o.ComponentIdentifier
}

// GetComponentIdentifierOk returns a tuple with the ComponentIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseOverride) GetComponentIdentifierOk() (*ComponentIdentifier, bool) {
	if o == nil || IsNil(o.ComponentIdentifier) {
		return nil, false
	}
	return o.ComponentIdentifier, true
}

// HasComponentIdentifier returns a boolean if a field has been set.
func (o *LicenseOverride) HasComponentIdentifier() bool {
	if o != nil && !IsNil(o.ComponentIdentifier) {
		return true
	}

	return false
}

// SetComponentIdentifier gets a reference to the given ComponentIdentifier and assigns it to the ComponentIdentifier field.
func (o *LicenseOverride) SetComponentIdentifier(v ComponentIdentifier) {
	o.ComponentIdentifier = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LicenseOverride) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseOverride) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LicenseOverride) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LicenseOverride) SetId(v string) {
	o.Id = &v
}

// GetLicenseIds returns the LicenseIds field value if set, zero value otherwise.
func (o *LicenseOverride) GetLicenseIds() []string {
	if o == nil || IsNil(o.LicenseIds) {
		var ret []string
		return ret
	}
	return o.LicenseIds
}

// GetLicenseIdsOk returns a tuple with the LicenseIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseOverride) GetLicenseIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.LicenseIds) {
		return nil, false
	}
	return o.LicenseIds, true
}

// HasLicenseIds returns a boolean if a field has been set.
func (o *LicenseOverride) HasLicenseIds() bool {
	if o != nil && !IsNil(o.LicenseIds) {
		return true
	}

	return false
}

// SetLicenseIds gets a reference to the given []string and assigns it to the LicenseIds field.
func (o *LicenseOverride) SetLicenseIds(v []string) {
	o.LicenseIds = v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *LicenseOverride) GetOwnerId() string {
	if o == nil || IsNil(o.OwnerId) {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseOverride) GetOwnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *LicenseOverride) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
func (o *LicenseOverride) SetOwnerId(v string) {
	o.OwnerId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *LicenseOverride) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseOverride) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *LicenseOverride) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *LicenseOverride) SetStatus(v string) {
	o.Status = &v
}

func (o LicenseOverride) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseOverride) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.ComponentIdentifier) {
		toSerialize["componentIdentifier"] = o.ComponentIdentifier
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LicenseIds) {
		toSerialize["licenseIds"] = o.LicenseIds
	}
	if !IsNil(o.OwnerId) {
		toSerialize["ownerId"] = o.OwnerId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableLicenseOverride struct {
	value *LicenseOverride
	isSet bool
}

func (v NullableLicenseOverride) Get() *LicenseOverride {
	return v.value
}

func (v *NullableLicenseOverride) Set(val *LicenseOverride) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseOverride) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseOverride(val *LicenseOverride) *NullableLicenseOverride {
	return &NullableLicenseOverride{value: val, isSet: true}
}

func (v NullableLicenseOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


