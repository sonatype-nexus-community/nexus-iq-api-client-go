/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.193.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AutoPolicyWaiverExclusionsAPIService AutoPolicyWaiverExclusionsAPI service
type AutoPolicyWaiverExclusionsAPIService service

type ApiAddAutoPolicyWaiveExclusionRequest struct {
	ctx context.Context
	ApiService *AutoPolicyWaiverExclusionsAPIService
	ownerType string
	ownerId string
	apiAutoPolicyWaiverExclusionRequestDTO *ApiAutoPolicyWaiverExclusionRequestDTO
}

// The request JSON can include the fields&lt;ol&gt;&lt;li&gt;applicationPublicId&lt;/li&gt;&lt;li&gt;ownerId - ID of the application or organization which will own the auto waiver exclusion&lt;/li&gt;&lt;li&gt;policyViolationId - ID of the policy violation which the exclusion will apply to&lt;/li&gt;&lt;li&gt;autoPolicyWaiverId - ID of the auto waiver you want to apply a exclusion to&lt;/li&gt;&lt;li&gt;scanId - ID of the scan which the violation being waived appeared in&lt;/li&gt;&lt;li&gt;matchStrategy (enumeration, required) can have values EXACT_COMPONENT, ALL_VERSIONS, POLICY_VIOLATION. &lt;/li&gt;&lt;/ol&gt;
func (r ApiAddAutoPolicyWaiveExclusionRequest) ApiAutoPolicyWaiverExclusionRequestDTO(apiAutoPolicyWaiverExclusionRequestDTO ApiAutoPolicyWaiverExclusionRequestDTO) ApiAddAutoPolicyWaiveExclusionRequest {
	r.apiAutoPolicyWaiverExclusionRequestDTO = &apiAutoPolicyWaiverExclusionRequestDTO
	return r
}

func (r ApiAddAutoPolicyWaiveExclusionRequest) Execute() (*ApiAutoPolicyWaiverExclusionResponseDTO, *http.Response, error) {
	return r.ApiService.AddAutoPolicyWaiveExclusionExecute(r)
}

/*
AddAutoPolicyWaiveExclusion Method for AddAutoPolicyWaiveExclusion

Use this method to create an auto policy waiver exclusion for a specified auto policy waiver.

Permissions required: Waive Policy Violations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the ownerType to specify which resource type owns the auto waiver you want to apply a exclusion to. Possible values are application, organization.
 @param ownerId Enter the corresponding id for the ownerType specified above.
 @return ApiAddAutoPolicyWaiveExclusionRequest
*/
func (a *AutoPolicyWaiverExclusionsAPIService) AddAutoPolicyWaiveExclusion(ctx context.Context, ownerType string, ownerId string) ApiAddAutoPolicyWaiveExclusionRequest {
	return ApiAddAutoPolicyWaiveExclusionRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
	}
}

// Execute executes the request
//  @return ApiAutoPolicyWaiverExclusionResponseDTO
func (a *AutoPolicyWaiverExclusionsAPIService) AddAutoPolicyWaiveExclusionExecute(r ApiAddAutoPolicyWaiveExclusionRequest) (*ApiAutoPolicyWaiverExclusionResponseDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiAutoPolicyWaiverExclusionResponseDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoPolicyWaiverExclusionsAPIService.AddAutoPolicyWaiveExclusion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/autoPolicyWaiverExclusions/{ownerType}/{ownerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiAutoPolicyWaiverExclusionRequestDTO == nil {
		return localVarReturnValue, nil, reportError("apiAutoPolicyWaiverExclusionRequestDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiAutoPolicyWaiverExclusionRequestDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAutoPolicyWaiverExclusionRequest struct {
	ctx context.Context
	ApiService *AutoPolicyWaiverExclusionsAPIService
	ownerType string
	ownerId string
	autoPolicyWaiverId string
	autoPolicyWaiverExclusionId string
}

func (r ApiDeleteAutoPolicyWaiverExclusionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAutoPolicyWaiverExclusionExecute(r)
}

/*
DeleteAutoPolicyWaiverExclusion Method for DeleteAutoPolicyWaiverExclusion

Use this method to delete an auto policy waiver exclusion, specified by the autoPolicyWaiverExclusionId.

Permissions required: Waive Policy Violations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType Enter the ownerType to specify the scope. A waiver exclusion corresponding to the autoPolicyWaiverExclusionId provided and within the scope specified will be deleted.
 @param ownerId Enter the corresponding id for the ownerType specified above.
 @param autoPolicyWaiverId Enter the relevant Auto Policy Waiver ID.
 @param autoPolicyWaiverExclusionId Enter the autoPolicyWaiverId to be deleted
 @return ApiDeleteAutoPolicyWaiverExclusionRequest
*/
func (a *AutoPolicyWaiverExclusionsAPIService) DeleteAutoPolicyWaiverExclusion(ctx context.Context, ownerType string, ownerId string, autoPolicyWaiverId string, autoPolicyWaiverExclusionId string) ApiDeleteAutoPolicyWaiverExclusionRequest {
	return ApiDeleteAutoPolicyWaiverExclusionRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
		autoPolicyWaiverId: autoPolicyWaiverId,
		autoPolicyWaiverExclusionId: autoPolicyWaiverExclusionId,
	}
}

// Execute executes the request
func (a *AutoPolicyWaiverExclusionsAPIService) DeleteAutoPolicyWaiverExclusionExecute(r ApiDeleteAutoPolicyWaiverExclusionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoPolicyWaiverExclusionsAPIService.DeleteAutoPolicyWaiverExclusion")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/autoPolicyWaiverExclusions/{ownerType}/{ownerId}/{autoPolicyWaiverId}/{autoPolicyWaiverExclusionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"autoPolicyWaiverId"+"}", url.PathEscape(parameterValueToString(r.autoPolicyWaiverId, "autoPolicyWaiverId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"autoPolicyWaiverExclusionId"+"}", url.PathEscape(parameterValueToString(r.autoPolicyWaiverExclusionId, "autoPolicyWaiverExclusionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAutoPolicyWaiverExclusionsRequest struct {
	ctx context.Context
	ApiService *AutoPolicyWaiverExclusionsAPIService
	ownerType string
	ownerId string
	autoPolicyWaiverId string
	page *int32
	pageSize *int32
}

func (r ApiGetAutoPolicyWaiverExclusionsRequest) Page(page int32) ApiGetAutoPolicyWaiverExclusionsRequest {
	r.page = &page
	return r
}

func (r ApiGetAutoPolicyWaiverExclusionsRequest) PageSize(pageSize int32) ApiGetAutoPolicyWaiverExclusionsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetAutoPolicyWaiverExclusionsRequest) Execute() ([]ApiAutoPolicyWaiverExclusionResponseDTO, *http.Response, error) {
	return r.ApiService.GetAutoPolicyWaiverExclusionsExecute(r)
}

/*
GetAutoPolicyWaiverExclusions Method for GetAutoPolicyWaiverExclusions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerType
 @param ownerId
 @param autoPolicyWaiverId
 @return ApiGetAutoPolicyWaiverExclusionsRequest
*/
func (a *AutoPolicyWaiverExclusionsAPIService) GetAutoPolicyWaiverExclusions(ctx context.Context, ownerType string, ownerId string, autoPolicyWaiverId string) ApiGetAutoPolicyWaiverExclusionsRequest {
	return ApiGetAutoPolicyWaiverExclusionsRequest{
		ApiService: a,
		ctx: ctx,
		ownerType: ownerType,
		ownerId: ownerId,
		autoPolicyWaiverId: autoPolicyWaiverId,
	}
}

// Execute executes the request
//  @return []ApiAutoPolicyWaiverExclusionResponseDTO
func (a *AutoPolicyWaiverExclusionsAPIService) GetAutoPolicyWaiverExclusionsExecute(r ApiGetAutoPolicyWaiverExclusionsRequest) ([]ApiAutoPolicyWaiverExclusionResponseDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ApiAutoPolicyWaiverExclusionResponseDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoPolicyWaiverExclusionsAPIService.GetAutoPolicyWaiverExclusions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/autoPolicyWaiverExclusions/{ownerType}/{ownerId}/{autoPolicyWaiverId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerType"+"}", url.PathEscape(parameterValueToString(r.ownerType, "ownerType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ownerId"+"}", url.PathEscape(parameterValueToString(r.ownerId, "ownerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"autoPolicyWaiverId"+"}", url.PathEscape(parameterValueToString(r.autoPolicyWaiverId, "autoPolicyWaiverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 10
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v []ApiAutoPolicyWaiverExclusionResponseDTO
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
