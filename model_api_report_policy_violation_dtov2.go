/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.182.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the ApiReportPolicyViolationDTOV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiReportPolicyViolationDTOV2{}

// ApiReportPolicyViolationDTOV2 struct for ApiReportPolicyViolationDTOV2
type ApiReportPolicyViolationDTOV2 struct {
	Constraints []ApiReportConstraintViolationDTOV2 `json:"constraints,omitempty"`
	Grandfathered *bool `json:"grandfathered,omitempty"`
	LegacyViolation *bool `json:"legacyViolation,omitempty"`
	PolicyId *string `json:"policyId,omitempty"`
	PolicyName *string `json:"policyName,omitempty"`
	PolicyThreatCategory *string `json:"policyThreatCategory,omitempty"`
	PolicyThreatLevel *int32 `json:"policyThreatLevel,omitempty"`
	PolicyViolationId *string `json:"policyViolationId,omitempty"`
	Waived *bool `json:"waived,omitempty"`
}

// NewApiReportPolicyViolationDTOV2 instantiates a new ApiReportPolicyViolationDTOV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiReportPolicyViolationDTOV2() *ApiReportPolicyViolationDTOV2 {
	this := ApiReportPolicyViolationDTOV2{}
	return &this
}

// NewApiReportPolicyViolationDTOV2WithDefaults instantiates a new ApiReportPolicyViolationDTOV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiReportPolicyViolationDTOV2WithDefaults() *ApiReportPolicyViolationDTOV2 {
	this := ApiReportPolicyViolationDTOV2{}
	return &this
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *ApiReportPolicyViolationDTOV2) GetConstraints() []ApiReportConstraintViolationDTOV2 {
	if o == nil || IsNil(o.Constraints) {
		var ret []ApiReportConstraintViolationDTOV2
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReportPolicyViolationDTOV2) GetConstraintsOk() ([]ApiReportConstraintViolationDTOV2, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *ApiReportPolicyViolationDTOV2) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []ApiReportConstraintViolationDTOV2 and assigns it to the Constraints field.
func (o *ApiReportPolicyViolationDTOV2) SetConstraints(v []ApiReportConstraintViolationDTOV2) {
	o.Constraints = v
}

// GetGrandfathered returns the Grandfathered field value if set, zero value otherwise.
func (o *ApiReportPolicyViolationDTOV2) GetGrandfathered() bool {
	if o == nil || IsNil(o.Grandfathered) {
		var ret bool
		return ret
	}
	return *o.Grandfathered
}

// GetGrandfatheredOk returns a tuple with the Grandfathered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReportPolicyViolationDTOV2) GetGrandfatheredOk() (*bool, bool) {
	if o == nil || IsNil(o.Grandfathered) {
		return nil, false
	}
	return o.Grandfathered, true
}

// HasGrandfathered returns a boolean if a field has been set.
func (o *ApiReportPolicyViolationDTOV2) HasGrandfathered() bool {
	if o != nil && !IsNil(o.Grandfathered) {
		return true
	}

	return false
}

// SetGrandfathered gets a reference to the given bool and assigns it to the Grandfathered field.
func (o *ApiReportPolicyViolationDTOV2) SetGrandfathered(v bool) {
	o.Grandfathered = &v
}

// GetLegacyViolation returns the LegacyViolation field value if set, zero value otherwise.
func (o *ApiReportPolicyViolationDTOV2) GetLegacyViolation() bool {
	if o == nil || IsNil(o.LegacyViolation) {
		var ret bool
		return ret
	}
	return *o.LegacyViolation
}

// GetLegacyViolationOk returns a tuple with the LegacyViolation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReportPolicyViolationDTOV2) GetLegacyViolationOk() (*bool, bool) {
	if o == nil || IsNil(o.LegacyViolation) {
		return nil, false
	}
	return o.LegacyViolation, true
}

// HasLegacyViolation returns a boolean if a field has been set.
func (o *ApiReportPolicyViolationDTOV2) HasLegacyViolation() bool {
	if o != nil && !IsNil(o.LegacyViolation) {
		return true
	}

	return false
}

// SetLegacyViolation gets a reference to the given bool and assigns it to the LegacyViolation field.
func (o *ApiReportPolicyViolationDTOV2) SetLegacyViolation(v bool) {
	o.LegacyViolation = &v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *ApiReportPolicyViolationDTOV2) GetPolicyId() string {
	if o == nil || IsNil(o.PolicyId) {
		var ret string
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReportPolicyViolationDTOV2) GetPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyId) {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *ApiReportPolicyViolationDTOV2) HasPolicyId() bool {
	if o != nil && !IsNil(o.PolicyId) {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given string and assigns it to the PolicyId field.
func (o *ApiReportPolicyViolationDTOV2) SetPolicyId(v string) {
	o.PolicyId = &v
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise.
func (o *ApiReportPolicyViolationDTOV2) GetPolicyName() string {
	if o == nil || IsNil(o.PolicyName) {
		var ret string
		return ret
	}
	return *o.PolicyName
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReportPolicyViolationDTOV2) GetPolicyNameOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyName) {
		return nil, false
	}
	return o.PolicyName, true
}

// HasPolicyName returns a boolean if a field has been set.
func (o *ApiReportPolicyViolationDTOV2) HasPolicyName() bool {
	if o != nil && !IsNil(o.PolicyName) {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given string and assigns it to the PolicyName field.
func (o *ApiReportPolicyViolationDTOV2) SetPolicyName(v string) {
	o.PolicyName = &v
}

// GetPolicyThreatCategory returns the PolicyThreatCategory field value if set, zero value otherwise.
func (o *ApiReportPolicyViolationDTOV2) GetPolicyThreatCategory() string {
	if o == nil || IsNil(o.PolicyThreatCategory) {
		var ret string
		return ret
	}
	return *o.PolicyThreatCategory
}

// GetPolicyThreatCategoryOk returns a tuple with the PolicyThreatCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReportPolicyViolationDTOV2) GetPolicyThreatCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyThreatCategory) {
		return nil, false
	}
	return o.PolicyThreatCategory, true
}

// HasPolicyThreatCategory returns a boolean if a field has been set.
func (o *ApiReportPolicyViolationDTOV2) HasPolicyThreatCategory() bool {
	if o != nil && !IsNil(o.PolicyThreatCategory) {
		return true
	}

	return false
}

// SetPolicyThreatCategory gets a reference to the given string and assigns it to the PolicyThreatCategory field.
func (o *ApiReportPolicyViolationDTOV2) SetPolicyThreatCategory(v string) {
	o.PolicyThreatCategory = &v
}

// GetPolicyThreatLevel returns the PolicyThreatLevel field value if set, zero value otherwise.
func (o *ApiReportPolicyViolationDTOV2) GetPolicyThreatLevel() int32 {
	if o == nil || IsNil(o.PolicyThreatLevel) {
		var ret int32
		return ret
	}
	return *o.PolicyThreatLevel
}

// GetPolicyThreatLevelOk returns a tuple with the PolicyThreatLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReportPolicyViolationDTOV2) GetPolicyThreatLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.PolicyThreatLevel) {
		return nil, false
	}
	return o.PolicyThreatLevel, true
}

// HasPolicyThreatLevel returns a boolean if a field has been set.
func (o *ApiReportPolicyViolationDTOV2) HasPolicyThreatLevel() bool {
	if o != nil && !IsNil(o.PolicyThreatLevel) {
		return true
	}

	return false
}

// SetPolicyThreatLevel gets a reference to the given int32 and assigns it to the PolicyThreatLevel field.
func (o *ApiReportPolicyViolationDTOV2) SetPolicyThreatLevel(v int32) {
	o.PolicyThreatLevel = &v
}

// GetPolicyViolationId returns the PolicyViolationId field value if set, zero value otherwise.
func (o *ApiReportPolicyViolationDTOV2) GetPolicyViolationId() string {
	if o == nil || IsNil(o.PolicyViolationId) {
		var ret string
		return ret
	}
	return *o.PolicyViolationId
}

// GetPolicyViolationIdOk returns a tuple with the PolicyViolationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReportPolicyViolationDTOV2) GetPolicyViolationIdOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyViolationId) {
		return nil, false
	}
	return o.PolicyViolationId, true
}

// HasPolicyViolationId returns a boolean if a field has been set.
func (o *ApiReportPolicyViolationDTOV2) HasPolicyViolationId() bool {
	if o != nil && !IsNil(o.PolicyViolationId) {
		return true
	}

	return false
}

// SetPolicyViolationId gets a reference to the given string and assigns it to the PolicyViolationId field.
func (o *ApiReportPolicyViolationDTOV2) SetPolicyViolationId(v string) {
	o.PolicyViolationId = &v
}

// GetWaived returns the Waived field value if set, zero value otherwise.
func (o *ApiReportPolicyViolationDTOV2) GetWaived() bool {
	if o == nil || IsNil(o.Waived) {
		var ret bool
		return ret
	}
	return *o.Waived
}

// GetWaivedOk returns a tuple with the Waived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiReportPolicyViolationDTOV2) GetWaivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Waived) {
		return nil, false
	}
	return o.Waived, true
}

// HasWaived returns a boolean if a field has been set.
func (o *ApiReportPolicyViolationDTOV2) HasWaived() bool {
	if o != nil && !IsNil(o.Waived) {
		return true
	}

	return false
}

// SetWaived gets a reference to the given bool and assigns it to the Waived field.
func (o *ApiReportPolicyViolationDTOV2) SetWaived(v bool) {
	o.Waived = &v
}

func (o ApiReportPolicyViolationDTOV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiReportPolicyViolationDTOV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	if !IsNil(o.Grandfathered) {
		toSerialize["grandfathered"] = o.Grandfathered
	}
	if !IsNil(o.LegacyViolation) {
		toSerialize["legacyViolation"] = o.LegacyViolation
	}
	if !IsNil(o.PolicyId) {
		toSerialize["policyId"] = o.PolicyId
	}
	if !IsNil(o.PolicyName) {
		toSerialize["policyName"] = o.PolicyName
	}
	if !IsNil(o.PolicyThreatCategory) {
		toSerialize["policyThreatCategory"] = o.PolicyThreatCategory
	}
	if !IsNil(o.PolicyThreatLevel) {
		toSerialize["policyThreatLevel"] = o.PolicyThreatLevel
	}
	if !IsNil(o.PolicyViolationId) {
		toSerialize["policyViolationId"] = o.PolicyViolationId
	}
	if !IsNil(o.Waived) {
		toSerialize["waived"] = o.Waived
	}
	return toSerialize, nil
}

type NullableApiReportPolicyViolationDTOV2 struct {
	value *ApiReportPolicyViolationDTOV2
	isSet bool
}

func (v NullableApiReportPolicyViolationDTOV2) Get() *ApiReportPolicyViolationDTOV2 {
	return v.value
}

func (v *NullableApiReportPolicyViolationDTOV2) Set(val *ApiReportPolicyViolationDTOV2) {
	v.value = val
	v.isSet = true
}

func (v NullableApiReportPolicyViolationDTOV2) IsSet() bool {
	return v.isSet
}

func (v *NullableApiReportPolicyViolationDTOV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiReportPolicyViolationDTOV2(val *ApiReportPolicyViolationDTOV2) *NullableApiReportPolicyViolationDTOV2 {
	return &NullableApiReportPolicyViolationDTOV2{value: val, isSet: true}
}

func (v NullableApiReportPolicyViolationDTOV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiReportPolicyViolationDTOV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


