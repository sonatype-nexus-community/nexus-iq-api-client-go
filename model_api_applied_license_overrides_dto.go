/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.193.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"encoding/json"
)

// checks if the ApiAppliedLicenseOverridesDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiAppliedLicenseOverridesDTO{}

// ApiAppliedLicenseOverridesDTO struct for ApiAppliedLicenseOverridesDTO
type ApiAppliedLicenseOverridesDTO struct {
	LicenseOverridesByOwner []LicenseOverrideByOwner `json:"licenseOverridesByOwner,omitempty"`
}

// NewApiAppliedLicenseOverridesDTO instantiates a new ApiAppliedLicenseOverridesDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAppliedLicenseOverridesDTO() *ApiAppliedLicenseOverridesDTO {
	this := ApiAppliedLicenseOverridesDTO{}
	return &this
}

// NewApiAppliedLicenseOverridesDTOWithDefaults instantiates a new ApiAppliedLicenseOverridesDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAppliedLicenseOverridesDTOWithDefaults() *ApiAppliedLicenseOverridesDTO {
	this := ApiAppliedLicenseOverridesDTO{}
	return &this
}

// GetLicenseOverridesByOwner returns the LicenseOverridesByOwner field value if set, zero value otherwise.
func (o *ApiAppliedLicenseOverridesDTO) GetLicenseOverridesByOwner() []LicenseOverrideByOwner {
	if o == nil || IsNil(o.LicenseOverridesByOwner) {
		var ret []LicenseOverrideByOwner
		return ret
	}
	return o.LicenseOverridesByOwner
}

// GetLicenseOverridesByOwnerOk returns a tuple with the LicenseOverridesByOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAppliedLicenseOverridesDTO) GetLicenseOverridesByOwnerOk() ([]LicenseOverrideByOwner, bool) {
	if o == nil || IsNil(o.LicenseOverridesByOwner) {
		return nil, false
	}
	return o.LicenseOverridesByOwner, true
}

// HasLicenseOverridesByOwner returns a boolean if a field has been set.
func (o *ApiAppliedLicenseOverridesDTO) HasLicenseOverridesByOwner() bool {
	if o != nil && !IsNil(o.LicenseOverridesByOwner) {
		return true
	}

	return false
}

// SetLicenseOverridesByOwner gets a reference to the given []LicenseOverrideByOwner and assigns it to the LicenseOverridesByOwner field.
func (o *ApiAppliedLicenseOverridesDTO) SetLicenseOverridesByOwner(v []LicenseOverrideByOwner) {
	o.LicenseOverridesByOwner = v
}

func (o ApiAppliedLicenseOverridesDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiAppliedLicenseOverridesDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LicenseOverridesByOwner) {
		toSerialize["licenseOverridesByOwner"] = o.LicenseOverridesByOwner
	}
	return toSerialize, nil
}

type NullableApiAppliedLicenseOverridesDTO struct {
	value *ApiAppliedLicenseOverridesDTO
	isSet bool
}

func (v NullableApiAppliedLicenseOverridesDTO) Get() *ApiAppliedLicenseOverridesDTO {
	return v.value
}

func (v *NullableApiAppliedLicenseOverridesDTO) Set(val *ApiAppliedLicenseOverridesDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAppliedLicenseOverridesDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAppliedLicenseOverridesDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAppliedLicenseOverridesDTO(val *ApiAppliedLicenseOverridesDTO) *NullableApiAppliedLicenseOverridesDTO {
	return &NullableApiAppliedLicenseOverridesDTO{value: val, isSet: true}
}

func (v NullableApiAppliedLicenseOverridesDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAppliedLicenseOverridesDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


